{"version":3,"sources":["Components/Header/Header.tsx","Redux/Client.js","Redux/Reducers/charsReducer.js","Redux/Actions/charActions.tsx","Redux/Reducers/episodesReducer.js","Redux/Actions/episodeAction.tsx","Redux/Reducers/locationsReducer.js","Redux/Actions/locationsActions.tsx","Components/SearchBar/SearchBar.tsx","Components/Modals/ModalChar.tsx","Components/CharCard/CharCard.tsx","Components/Pagination/Pagination.tsx","Components/NoData/NoData.tsx","Components/Characters/Characters.tsx","Components/Modals/ModalLocation.tsx","Components/Modals/ModalEpisode.tsx","Components/InfoCard/InfoCard.tsx","Components/Locations/Locations.tsx","Components/Episodes/Episodes.tsx","Components/Footer/Footer.tsx","AppRoutes.jsx","App.tsx","serviceWorker.js","Redux/store.js","index.js"],"names":["Header","changeActive","id","document","getElementById","className","exact","to","activeClassName","onClick","client","ApolloClient","uri","initialData","fetching","array","filtered","search","nextPage","prevPage","totalPages","error","getCharactersAction","direction","dispatch","getState","pageToGo","query","gql","type","undefined","characters","variables","page","then","data","payload","results","next","info","prev","total","pages","catch","errors","filteredEpi","searchEpi","nextPageEpisod","prevPageEpisod","totalPagesEpisod","errorEpiso","getEpisodesAction","episodes","i","length","x","splice","filteredLoc","searchLoc","nextPageLoca","prevPageLoca","totalPagesLoca","errorLoc","getLocationsAction","locations","residents","nextLoc","prevLoc","totalLoc","connect","state","getCharFiltersAction","searchName","searchType","name","getEpisodesFiltersAction","getLocationsFiltersAction","removeSearchCharAction","removeSearchEpisodeAction","removeSearchLocationsAction","title","searchInfo","e","target","value","toUpperCase","slice","clearSearch","placeholder","aria-label","onChange","onKeyPress","keyCode","Modal","setAppElement","ModalChar","onHide","show","isOpen","style","overlay","backgroundColor","content","position","src","image","alt","gender","species","CharCard","useState","setShow","width","charsTotal","episodTotal","locationTotal","charsNext","episodNext","locationNext","charsPrev","episodPrev","locationPrev","goToNextPage","goToPrevPage","NoData","initial","map","key","ModalLocation","dimension","maxWidth","ModalEpisode","air_date","episode","InfoCard","handleClose","handleShow","aria-hidden","Footer","date","moment","format","AppRoutes","path","component","Characters","Locations","Episodes","role","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","generateStore","WithRouter","StrictMode","WithStore","WithApollo","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f58e2eea.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (): JSX.Element => {\r\n\r\n    const changeActive = (id: string): void => {\r\n        switch (id) {\r\n            case 'r-m':\r\n                document.getElementById('r-m').className = \"nav-link active\"\r\n                document.getElementById('loc').className = \"nav-link\"\r\n                document.getElementById('ep').className = \"nav-link\"\r\n                break;\r\n            case 'loc':\r\n                document.getElementById('loc').className = \"nav-link active\"\r\n                document.getElementById('r-m').className = \"nav-link\"\r\n                document.getElementById('ep').className = \"nav-link\"\r\n                break;\r\n            case 'ep':\r\n                document.getElementById('ep').className = \"nav-link active\"\r\n                document.getElementById('loc').className = \"nav-link\"\r\n                document.getElementById('r-m').className = \"nav-link\"\r\n                break;\r\n            default:\r\n                document.getElementById('r-m').className = \"nav-link\"\r\n                document.getElementById('loc').className = \"nav-link\"\r\n                document.getElementById('ep').className = \"nav-link\"\r\n                break;\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n\r\n        <nav className=\"navbar sticky-top navbar-expand-lg navbar-expand-md navbar-dark bg-dark \">\r\n            <div className=\"mx-auto\" >\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\" id=\"r-m\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/rick-morty\" activeClassName=\"activo\" onClick={() => changeActive('r-m')}> Characters </NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\" id=\"loc\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/locations\" activeClassName=\"activo\" onClick={() => changeActive('loc')}> Locations </NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\" id=\"ep\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/episodes\" activeClassName=\"activo\" onClick={() => changeActive('ep')}> Episodes </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import ApolloClient from \"apollo-boost\"\r\n\r\nexport const client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})","import { gql } from \"apollo-boost\"\r\nimport { client } from '../Client';\r\n// Actions\r\nimport {\r\n    GET_CHARACTERS, GET_CHARACTERS_SUCCESS, GET_CHARACTERS_ERROR,\r\n    GET_FILTERS, GET_FILTERS_ERROR, GET_FILTERS_SUCCESS, REMOVE_FILTERED,\r\n    UPDATE_PAGE, SET_SEARCH\r\n} from '../Actions/charActions';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filtered: [],\r\n    search: '',\r\n    nextPage: 1,\r\n    prevPage: 0,\r\n    totalPages: 0,\r\n    error: false\r\n}\r\n\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_CHARACTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_CHARACTERS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        case GET_CHARACTERS_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false }\r\n        case GET_FILTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_FILTERS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload, filtered: [] }\r\n        case GET_FILTERS_SUCCESS:\r\n            return { ...state, filtered: action.payload, fetching: false, error: false }\r\n        case REMOVE_FILTERED:\r\n            return { ...state, filtered: action.payload, error: false, search: '' }\r\n        case SET_SEARCH:\r\n            return { ...state, search: action.payload }\r\n        case UPDATE_PAGE:\r\n            return {\r\n                ...state, nextPage: action.payload.next,\r\n                prevPage: action.payload.prev, totalPages: action.payload.total\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions Creators\r\n\r\nexport const getCharFiltersAction = (searchName, searchType) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($name: String, $type: String) {\r\n        characters( filter: { name: $name, type: $type }) {\r\n          results {\r\n            id\r\n            name\r\n            image\r\n            type\r\n            gender\r\n            species\r\n            status\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_FILTERS\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName, type: searchType }\r\n    }).then(({ data }) => {\r\n        const searchValue = searchName ? searchName : searchType;\r\n        dispatch({\r\n            type: SET_SEARCH,\r\n            payload: searchValue\r\n        })\r\n        dispatch({\r\n            type: GET_FILTERS_SUCCESS,\r\n            payload: data.characters.results\r\n\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_FILTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n\r\n}\r\n\r\nexport const removeSearchCharAction = () => (dispatch, getState) => {\r\n    const filtered = []\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED,\r\n        payload: filtered\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nexport const getCharactersAction = (direction) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($page: Int){\r\n        characters(page: $page){\r\n          info{\r\n            pages\r\n            next\r\n            prev\r\n          }\r\n          results{\r\n            id\r\n            name\r\n            image\r\n            type\r\n            gender\r\n            species\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_CHARACTERS\r\n    })\r\n\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPage } = getState().characters\r\n        pageToGo = prevPage;\r\n    } else {\r\n        let { nextPage } = getState().characters\r\n        pageToGo = nextPage;\r\n    }\r\n\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data }) => {\r\n        dispatch({\r\n            type: GET_CHARACTERS_SUCCESS,\r\n            payload: data.characters.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE,\r\n            payload: {\r\n                next: data.characters.info.next ? data.characters.info.next : null,\r\n                prev: data.characters.info.prev ? data.characters.info.prev : null,\r\n                total: data.characters.info.pages\r\n            }\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_CHARACTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n\r\n    })\r\n\r\n}\r\n\r\n","export const GET_CHARACTERS: string = 'GET_CHARACTERS';\r\nexport const GET_CHARACTERS_SUCCESS: string = 'GET_CHARACTERS_SUCCESS';\r\nexport const GET_CHARACTERS_ERROR: string = 'GET_CHARACTERS_ERROR';\r\n\r\nexport const GET_FILTERS: string = 'GET_FILTERS';\r\nexport const GET_FILTERS_ERROR: string = 'GET_FILTERS_ERROR';\r\nexport const GET_FILTERS_SUCCESS: string = 'GET_FILTERS_SUCCESS';\r\n\r\nexport const REMOVE_FILTERED: string = 'REMOVE_FILTERED';\r\n\r\nexport const UPDATE_PAGE: string = 'UPDATE_PAGE';\r\n\r\nexport const SET_SEARCH: string = 'SET_SEARCH';","import { gql } from \"apollo-boost\";\r\nimport { client } from '../Client';\r\n// Actions\r\nimport {\r\n    GET_EPISODES, GET_EPISODES_SUCCESS, GET_EPISODES_ERROR,\r\n    GET_FILTERS_EPISODES, GET_FILTERS_EPISODES_ERROR, GET_FILTERS_EPISODES_SUCCESS, REMOVE_FILTERED_EPISODE,\r\n    UPDATE_PAGE_EPISODE, SET_SEARCH_EP\r\n} from '../Actions/episodeAction';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filteredEpi: [],\r\n    searchEpi: '',\r\n    nextPageEpisod: 1,\r\n    prevPageEpisod: 0,\r\n    totalPagesEpisod: 0,\r\n    errorEpiso: false\r\n}\r\n\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_EPISODES:\r\n            return { ...state, fetching: true }\r\n        case GET_EPISODES_ERROR:\r\n            return { ...state, fetching: false, errorEpiso: action.payload }\r\n        case GET_EPISODES_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false, errorEpiso: false }\r\n        case GET_FILTERS_EPISODES:\r\n            return { ...state, fetching: true }\r\n        case GET_FILTERS_EPISODES_ERROR:\r\n            return { ...state, fetching: false, errorEpiso: action.payload }\r\n        case GET_FILTERS_EPISODES_SUCCESS:\r\n            return { ...state, filteredEpi: action.payload, fetching: false, errorEpiso: false }\r\n        case REMOVE_FILTERED_EPISODE:\r\n            return { ...state, filteredEpi: action.payload, errorEpiso: false, searchEpi: '' }\r\n        case UPDATE_PAGE_EPISODE:\r\n            return {\r\n                ...state, nextPageEpisod: action.payload.next,\r\n                prevPageEpisod: action.payload.prev, totalPagesEpisod: action.payload.total\r\n            }\r\n        case SET_SEARCH_EP:\r\n            return { ...state, searchEpi: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions Creators\r\n\r\nexport const getEpisodesFiltersAction = (searchName) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($name: String) {\r\n        episodes( filter: { name: $name }) {\r\n            results{\r\n              id\r\n              name\r\n              episode\r\n              air_date\r\n              characters{\r\n                id\r\n                name\r\n                image\r\n              }\r\n            }\r\n          }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_FILTERS_EPISODES\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.episodes.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.episodes.results[i].characters.splice(5, data.episodes.results[i].characters.length);\r\n            }\r\n        }\r\n        dispatch({\r\n            type: GET_FILTERS_EPISODES_SUCCESS,\r\n            payload: data.episodes.results\r\n\r\n        })\r\n        dispatch({\r\n            type: SET_SEARCH_EP,\r\n            payload: searchName\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_FILTERS_EPISODES_ERROR,\r\n            payload: true\r\n        })\r\n\r\n        return\r\n    })\r\n\r\n}\r\n\r\nexport const removeSearchEpisodeAction = () => (dispatch, getState) => {\r\n    const filtered = [];\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED_EPISODE,\r\n        payload: filtered\r\n    })\r\n}\r\n\r\nexport const getEpisodesAction = (direction) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($page: Int){\r\n        episodes(page: $page){\r\n          info{\r\n            pages\r\n            next\r\n            prev\r\n          }\r\n          results{\r\n            id\r\n            name\r\n            episode\r\n            air_date\r\n            characters{\r\n               id\r\n               name\r\n               image\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_EPISODES\r\n    })\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPageEpisod } = getState().episodes\r\n        pageToGo = prevPageEpisod;\r\n    } else {\r\n        let { nextPageEpisod } = getState().episodes\r\n        pageToGo = nextPageEpisod;\r\n    }\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.episodes.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.episodes.results[i].characters.splice(5, data.episodes.results[i].characters.length);\r\n            }\r\n        }\r\n        dispatch({\r\n            type: GET_EPISODES_SUCCESS,\r\n            payload: data.episodes.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE_EPISODE,\r\n            payload: {\r\n                next: data.episodes.info.next ? data.episodes.info.next : null,\r\n                prev: data.episodes.info.prev ? data.episodes.info.prev : null,\r\n                total: data.episodes.info.pages\r\n            }\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_EPISODES_ERROR,\r\n            payload: true\r\n        })\r\n\r\n        return\r\n    })\r\n\r\n}","export const GET_EPISODES: string = 'GET_EPISODES';\r\nexport const GET_EPISODES_SUCCESS: string = 'GET_EPISODES_SUCCESS';\r\nexport const GET_EPISODES_ERROR: string = 'GET_EPISODES_ERROR';\r\n\r\nexport const GET_FILTERS_EPISODES: string = 'GET_FILTERS_EPISODES';\r\nexport const GET_FILTERS_EPISODES_ERROR: string = 'GET_FILTERS_EPISODES_ERROR';\r\nexport const GET_FILTERS_EPISODES_SUCCESS: string = 'GET_FILTERS_EPISODES_SUCCESS';\r\n\r\nexport const REMOVE_FILTERED_EPISODE: string = 'REMOVE_FILTERED_EPISODE';\r\n\r\nexport const UPDATE_PAGE_EPISODE: string = 'UPDATE_PAGE_EPISODE';\r\n\r\nexport const SET_SEARCH_EP: string = 'SET_SEARCH_EP';","import { gql } from \"apollo-boost\";\r\nimport { client } from '../Client';\r\n// Actions\r\nimport {\r\n    GET_LOCATIONS, GET_LOCATIONS_SUCCESS, GET_LOCATIONS_ERROR,\r\n    GET_LOCATIONS_FILTERS, GET_LOCATIONS_FILTERS_ERROR, GET_LOCATIONS_FILTERS_SUCCESS, REMOVE_FILTERED_LOCATION,\r\n    UPDATE_PAGE_LOCATIONS, SET_SEARCH_LOC\r\n} from '../Actions/locationsActions';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filteredLoc: [],\r\n    searchLoc: '',\r\n    nextPageLoca: 1,\r\n    prevPageLoca: 0,\r\n    totalPagesLoca: 0,\r\n    errorLoc: false\r\n}\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_LOCATIONS:\r\n            return { ...state, fetching: true }\r\n        case GET_LOCATIONS_ERROR:\r\n            return { ...state, fetching: false, errorLoc: action.payload }\r\n        case GET_LOCATIONS_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false, errorLoc: false }\r\n        case GET_LOCATIONS_FILTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_LOCATIONS_FILTERS_ERROR:\r\n            return { ...state, fetching: false, errorLoc: action.payload }\r\n        case GET_LOCATIONS_FILTERS_SUCCESS:\r\n            return { ...state, filteredLoc: action.payload, fetching: false, errorLoc: false }\r\n        case REMOVE_FILTERED_LOCATION:\r\n            return { ...state, filteredLoc: action.payload, errorLoc: false, searchLoc: '' }\r\n        case UPDATE_PAGE_LOCATIONS:\r\n            return {\r\n                ...state, nextPageLoca: action.payload.nextLoc,\r\n                prevPageLoca: action.payload.prevLoc, totalPagesLoca: action.payload.totalLoc\r\n            }\r\n        case SET_SEARCH_LOC:\r\n            return { ...state, searchLoc: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//Actions Creators\r\nexport const getLocationsFiltersAction = (searchName, searchType) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($name: String, $type: String) {\r\n        locations( filter: { name: $name, type: $type }) {\r\n            results{\r\n              id\r\n              name\r\n              dimension\r\n              type\r\n              residents{\r\n                id\r\n                name\r\n                image\r\n              }\r\n            }\r\n          }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_LOCATIONS_FILTERS\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName, type: searchType }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.locations.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.locations.results[i].residents.splice(5, data.locations.results[i].residents.length);\r\n            }\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_LOCATIONS_FILTERS_SUCCESS,\r\n            payload: data.locations.results\r\n\r\n        })\r\n        const searchValue = searchName ? searchName : searchType;\r\n        dispatch({\r\n            type: SET_SEARCH_LOC,\r\n            payload: searchValue\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_LOCATIONS_FILTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n}\r\n\r\nexport const removeSearchLocationsAction = () => (dispatch, getState) => {\r\n    const filtered = [];\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED_LOCATION,\r\n        payload: filtered\r\n    })\r\n}\r\n\r\nexport const getLocationsAction = (direction) => (dispatch, getState) => {\r\n    const query = gql`\r\n        query ($page: Int){\r\n            locations(page: $page){\r\n            info{\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                type\r\n                dimension\r\n                residents{\r\n                id\r\n                name\r\n                image\r\n                }\r\n            }\r\n            }\r\n        }\r\n    `\r\n    dispatch({\r\n        type: GET_LOCATIONS\r\n    })\r\n\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPageLoca } = getState().locations\r\n        pageToGo = prevPageLoca;\r\n    } else {\r\n        let { nextPageLoca } = getState().locations\r\n        pageToGo = nextPageLoca;\r\n    }\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data, error }) => {\r\n        for (let i = 0; i < data.locations.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.locations.results[i].residents.splice(5, data.locations.results[i].residents.length);\r\n            }\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_LOCATIONS_SUCCESS,\r\n            payload: data.locations.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE_LOCATIONS,\r\n            payload: {\r\n                nextLoc: data.locations.info.next ? data.locations.info.next : null,\r\n                prevLoc: data.locations.info.prev ? data.locations.info.prev : null,\r\n                totalLoc: data.locations.info.pages\r\n            }\r\n        })\r\n\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_LOCATIONS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n\r\n}","export const GET_LOCATIONS: string = 'GET_LOCATIONS';\r\nexport const GET_LOCATIONS_SUCCESS: string = 'GET_LOCATIONS_SUCCESS';\r\nexport const GET_LOCATIONS_ERROR: string = 'GET_LOCATIONS_ERROR';\r\n\r\nexport const GET_LOCATIONS_FILTERS: string = 'GET_LOCATIONS_FILTERS';\r\nexport const GET_LOCATIONS_FILTERS_ERROR: string = 'GET_LOCATIONS_FILTERS_ERROR';\r\nexport const GET_LOCATIONS_FILTERS_SUCCESS: string = 'GET_LOCATIONS_FILTERS_SUCCESS';\r\n\r\nexport const REMOVE_FILTERED_LOCATION: string = 'REMOVE_FILTERED_LOCATION';\r\n\r\nexport const UPDATE_PAGE_LOCATIONS: string = 'UPDATE_PAGE_LOCATIONS';\r\n\r\nexport const SET_SEARCH_LOC: string = 'SET_SEARCH_LOC';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getCharFiltersAction, removeSearchCharAction } from '../../Redux/Reducers/charsReducer';\r\nimport { getEpisodesFiltersAction, removeSearchEpisodeAction } from '../../Redux/Reducers/episodesReducer';\r\nimport { getLocationsFiltersAction, removeSearchLocationsAction } from '../../Redux/Reducers/locationsReducer';\r\n\r\n\r\nconst SearchBar = ({ title,\r\n    getCharFiltersAction, getEpisodesFiltersAction,\r\n    getLocationsFiltersAction, removeSearchCharAction,\r\n    removeSearchEpisodeAction, removeSearchLocationsAction }) => {\r\n\r\n    function searchInfo(e) {\r\n        let target: string = e.target.value;\r\n        if (target.length > 0)\r\n            target = target[0].toUpperCase() + target.slice(1);\r\n\r\n        if (target.length > 2) {\r\n            if (title === 'characters') {\r\n                const search: string = (document.getElementById('searchType') as HTMLFormElement).value;\r\n\r\n                search === 'name' ?\r\n                    //Filter by name\r\n                    getCharFiltersAction(target, '')\r\n                    :\r\n                    //Filter by type\r\n                    getCharFiltersAction('', target);\r\n\r\n\r\n            }\r\n            if (title === 'episodes') {\r\n                getEpisodesFiltersAction(target);\r\n            }\r\n            if (title === 'locations') {\r\n                const search: string = (document.getElementById('searchType') as HTMLFormElement).value\r\n                search === 'name' ?\r\n                    //Filter by name\r\n                    getLocationsFiltersAction(target, '')\r\n                    :\r\n                    //Filter by type\r\n                    getLocationsFiltersAction('', target);\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearSearch() {\r\n        if (title === 'characters') {\r\n            removeSearchCharAction();\r\n            (document.getElementById('input') as HTMLFormElement).value = '';\r\n        }\r\n        if (title === 'episodes') {\r\n            removeSearchEpisodeAction();\r\n            (document.getElementById('input-episodes') as HTMLFormElement).value = '';\r\n        }\r\n        if (title === 'locations') {\r\n            removeSearchLocationsAction();\r\n            (document.getElementById('input') as HTMLFormElement).value = '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"pb-2\">\r\n\r\n                {\r\n                    title === 'episodes'\r\n                        ?\r\n                        <input className=\"form-control\"\r\n                            type=\"text\"\r\n                            placeholder={`Search ${title} name`}\r\n                            aria-label=\"Search\"\r\n                            onChange={searchInfo}\r\n                            onKeyPress={(e) => { if (e.keyCode === 13) return false }}\r\n                            id=\"input-episodes\"\r\n                        />\r\n                        :\r\n                        <>\r\n                            <select onChange={clearSearch} className=\"custom-select col-lg-4 col-md-4 col-sm-5 pb-2\" id=\"searchType\">\r\n                                <option value=\"name\">Name</option>\r\n                                <option value=\"type\">Type</option>\r\n                            </select>\r\n                            <input className=\"form-control pt-2\"\r\n                                type=\"text\"\r\n                                placeholder={`Search ${title}`}\r\n                                aria-label=\"Search\"\r\n                                onChange={searchInfo}\r\n                                onKeyPress={(e) => { if (e.keyCode === 13) return false }}\r\n                                id=\"input\"\r\n                            />\r\n                        </>\r\n                }\r\n                <button className=\"btn btn-sm float-right\" onClick={clearSearch}>Clear Search</button>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nfunction mapState(state: any) {\r\n    return {}\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n\r\n    getCharFiltersAction: PropTypes.func.isRequired,\r\n    getEpisodesFiltersAction: PropTypes.func.isRequired,\r\n    getLocationsFiltersAction: PropTypes.func.isRequired,\r\n    removeSearchCharAction: PropTypes.func.isRequired,\r\n    removeSearchEpisodeAction: PropTypes.func.isRequired,\r\n    removeSearchLocationsAction: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default connect(mapState, {\r\n    getCharFiltersAction,\r\n    getEpisodesFiltersAction,\r\n    getLocationsFiltersAction,\r\n    removeSearchCharAction,\r\n    removeSearchEpisodeAction,\r\n    removeSearchLocationsAction\r\n})(SearchBar);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\nconst ModalChar = ({ data, onHide, show }): JSX.Element => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}><i className=\"fa fa-times\"></i></button>\r\n                </div>\r\n                <img className=\"card-img-top rounded mx-auto w-25\" src={data.image} alt={data.name} />\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title text-center\">{data.name}</h4>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Gender: ${data.gender}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Species: ${data.species}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Type: ${data.type ? data.type : 'No data'}`}</p></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal>\r\n    );\r\n};\r\n\r\nModalChar.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        image: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        gender: PropTypes.string.isRequired,\r\n        species: PropTypes.string.isRequired,\r\n        type: PropTypes.string\r\n    })\r\n}\r\n\r\nexport default ModalChar;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Modal\r\nimport CharModal from '../Modals/ModalChar';\r\n\r\n\r\nconst CharCard = ({ data }): JSX.Element => {\r\n    const [show, setShow] = useState<boolean>(false);\r\n\r\n    function handleClose(): void {\r\n        setShow(false);\r\n    }\r\n    function handleShow(): void {\r\n        setShow(true);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"mt-2 mb-2 col-lg-4 col-md-5 col-sm-6 mx-auto\">\r\n                <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                    <div className=\"embed-responsive embed-responsive-1by1\">\r\n                        <button onClick={handleShow}>\r\n                            <img className=\"card-img-top embed-responsive-item\" src={data.image} alt={data.id}\r\n                                title=\"Click for more info!\"\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title text-center\">{data.name}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {\r\n                show && <CharModal\r\n                    show={show}\r\n                    onHide={handleClose}\r\n                    data={data} />\r\n\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nCharCard.propTypes = {\r\n    data: PropTypes.shape({\r\n        image: PropTypes.string,\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired\r\n    })\r\n}\r\n\r\nexport default CharCard;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getCharactersAction } from '../../Redux/Reducers/charsReducer';\r\nimport { getEpisodesAction } from '../../Redux/Reducers/episodesReducer';\r\nimport { getLocationsAction } from '../../Redux/Reducers/locationsReducer';\r\n\r\n\r\nconst Pagination = ({ title, charsTotal, episodTotal, locationTotal, charsNext, episodNext,\r\n    locationNext, charsPrev, episodPrev, locationPrev, getCharactersAction, getEpisodesAction,\r\n    getLocationsAction }) => {\r\n\r\n    function goToNextPage() {\r\n        switch (title) {\r\n            case 'episodes':\r\n                getEpisodesAction()\r\n                break;\r\n            case 'characters':\r\n                getCharactersAction()\r\n                break;\r\n            case 'locations':\r\n                getLocationsAction()\r\n                break;\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    function goToPrevPage() {\r\n        switch (title) {\r\n            case 'episodes':\r\n                getEpisodesAction(episodPrev)\r\n                break;\r\n            case 'characters':\r\n                getCharactersAction(charsPrev)\r\n                break;\r\n            case 'locations':\r\n                getLocationsAction(locationPrev)\r\n                break;\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    if (title === 'episodes') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${episodPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToPrevPage}\r\n                        >Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item disabled\" >\r\n                        <label className=\"page-link text-info\">\r\n                            {`${episodNext != null ? episodNext - 1 : episodTotal} of ${episodTotal}`}\r\n                        </label>\r\n                    </li>\r\n                    <li className={`page-item ${episodNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToNextPage}>Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n\r\n    }\r\n    if (title === 'characters') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${charsPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToPrevPage}>Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item disabled\">\r\n                        <label className=\"page-link text-info\">\r\n                            {`${charsNext != null ? charsNext - 1 : charsTotal} of ${charsTotal}`}\r\n                        </label>\r\n                    </li>\r\n                    <li className={`page-item ${charsNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\"\r\n                            onClick={goToNextPage}\r\n                        >Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n    if (title === 'locations') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${locationPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button onClick={goToPrevPage} className=\"page-link\">Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item disabled\" >\r\n                        <label className=\"page-link text-info\">\r\n                            {`${locationNext != null ? locationNext - 1 : locationTotal} of ${locationTotal}`}\r\n                        </label>\r\n                    </li>\r\n                    <li className={`page-item ${locationNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\"\r\n                            onClick={goToNextPage}\r\n                        >Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nfunction mapState(state: any) {\r\n    return {\r\n        charsTotal: state.characters.totalPages,\r\n        episodTotal: state.episodes.totalPagesEpisod,\r\n        locationTotal: state.locations.totalPagesLoca,\r\n\r\n        charsNext: state.characters.nextPage,\r\n        episodNext: state.episodes.nextPageEpisod,\r\n        locationNext: state.locations.nextPageLoca,\r\n\r\n        charsPrev: state.characters.prevPage,\r\n        episodPrev: state.episodes.prevPageEpisod,\r\n        locationPrev: state.locations.prevPageLoca,\r\n\r\n    }\r\n}\r\n\r\nPagination.propTypes = {\r\n    charsTotal: PropTypes.number.isRequired,\r\n    episodTotal: PropTypes.number.isRequired,\r\n    locationTotal: PropTypes.number.isRequired,\r\n    charsNext: PropTypes.number,\r\n    episodNext: PropTypes.number,\r\n    locationNext: PropTypes.number,\r\n    charsPrev: PropTypes.number,\r\n    episodPrev: PropTypes.number,\r\n    locationPrev: PropTypes.number,\r\n    getCharactersAction: PropTypes.func.isRequired,\r\n    getEpisodesAction: PropTypes.func.isRequired,\r\n    getLocationsAction: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default connect(mapState, { getCharactersAction, getEpisodesAction, getLocationsAction })(Pagination);","import React from 'react';\r\n\r\nconst NoData = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <h3 className=\"text-danger text-center pt-5\">There is no data for this search :( </h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoData;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Componets\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport CharCard from '../CharCard/CharCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst Characters = ({ initial, filtered, error, search }): JSX.Element => {\r\n\r\n    const title: string = 'characters';\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite character</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : null\r\n                }\r\n                {\r\n                    search && !error ?\r\n                        <span><small>{`Showing info for ${search}`}</small></span>\r\n                        : null\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2 pb-3\">\r\n                {\r\n                    error === false\r\n                        ? filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <CharCard\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <CharCard\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : null\r\n                }\r\n            </div>\r\n            {\r\n                error === false && filtered < 1 ?\r\n                    <div className=\"pb-2\">\r\n                        <Pagination\r\n                            title={title}\r\n                        />\r\n                    </div>\r\n                    : null\r\n\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction mapState(state: any) {\r\n    return {\r\n        initial: state.characters.array,\r\n        filtered: state.characters.filtered,\r\n        error: state.characters.error,\r\n        search: state.characters.search\r\n    }\r\n}\r\n\r\nCharacters.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool,\r\n    search: PropTypes.string\r\n}\r\n\r\nexport default connect(mapState)(Characters);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst ModalLocation = ({ data, onHide, show }): JSX.Element => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right  pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}><i className=\"fa fa-times\"></i></button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title text-center\">{data.name}</h1>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Dimension: ${data.dimension}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Type: ${data.type}`}</p></li>\r\n                    </ul>\r\n                    <h5 className=\"text-center\">Residents</h5>\r\n                    {\r\n                        data.residents[0].id != null ?\r\n                            <div className=\"card-deck\">\r\n                                {\r\n                                    data.residents.map(e => (\r\n                                        <div className=\"card\" key={e.name} style={{ maxWidth: '14rem' }}>\r\n                                            <img className=\"card-img-top\" src={e.image} alt={e.name} />\r\n                                            <div className=\"card-body text-dark\">\r\n                                                <h5 className=\"card-title text-center\">{e.name}</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                            : <h6 className=\"text-center pt-2\">No residents in this location.</h6>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal >\r\n    )\r\n}\r\n\r\nModalLocation.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        dimension: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        type: PropTypes.string,\r\n        residents: PropTypes.array.isRequired\r\n    })\r\n}\r\nexport default ModalLocation; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst ModalEpisode = ({ data, onHide, show }): JSX.Element => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right  pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}><i className=\"fa fa-times\"></i></button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title text-center\">{data.name}</h1>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Release Date: ${data.air_date}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Episode: ${data.episode}`}</p></li>\r\n                    </ul>\r\n                    <h3 className=\"text-center\">Characters</h3>\r\n                    <div className=\"card-deck\">\r\n                        {data.characters.map(e => (\r\n                            <div className=\"card\" key={e.name}>\r\n                                <img className=\"card-img-top\" src={e.image} alt={e.name} />\r\n                                <div className=\"card-body text-dark\">\r\n                                    <h5 className=\"card-title text-center\">{e.name}</h5>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nModalEpisode.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        air_date: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        episode: PropTypes.string.isRequired,\r\n        characters: PropTypes.array.isRequired\r\n    })\r\n}\r\n\r\nexport default ModalEpisode; ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './InfoCard.css'\r\n// Modal\r\nimport ModalLocation from '../Modals/ModalLocation';\r\nimport ModalEpisode from '../Modals/ModalEpisode';\r\n\r\nconst InfoCard = ({ data, title }) => {\r\n    const [show, setShow] = useState<boolean>(false);\r\n\r\n    function handleClose(): void {\r\n        setShow(false);\r\n    }\r\n    function handleShow(): void {\r\n        setShow(true);\r\n    }\r\n\r\n\r\n    if (title === 'episodes') {\r\n        return (\r\n            <>\r\n                <div className=\"mt-2 mb-2 col-lg-4 col-md-5 col-sm-6 mx-auto\">\r\n                    <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                        <div className=\"card-body\">\r\n                            <h3 className=\"card-title text-center\">{data.name}</h3><br></br>\r\n                            <p>Episode: {data.episode}</p>\r\n                        </div>\r\n                        <div className=\"card-footer text-right\">\r\n                            <button className=\"btn btn-sm btn-info\" onClick={handleShow}><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    show && <ModalEpisode\r\n                        show={show}\r\n                        onHide={handleClose}\r\n                        data={data} />\r\n\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (title === 'locations') {\r\n        return (\r\n            <>\r\n                < div className=\"mt-2 mb-2 col-lg-4 col-md-5 col-sm-6 mx-auto\" >\r\n                    <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                        <div className=\"card-body\">\r\n                            <h3 className=\"card-title text-center\">{data.name}</h3>\r\n                            {\r\n                                data.dimension === 'unknown' ?\r\n                                    <p>Dimension unknown</p>\r\n                                    : <p>{data.dimension}</p>\r\n                            }\r\n                        </div>\r\n                        <div className=\"card-footer text-right\">\r\n                            <button className=\"btn btn-sm btn-info\" onClick={handleShow}><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    show && <ModalLocation\r\n                        show={show}\r\n                        onHide={handleClose}\r\n                        data={data} />\r\n\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nInfoCard.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    data: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        episode: PropTypes.string,\r\n        dimension: PropTypes.string\r\n    })\r\n}\r\n\r\nexport default InfoCard","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport InfoCard from '../InfoCard/InfoCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Locations = ({ initial, filtered, error, search }): JSX.Element => {\r\n    const title: string = \"locations\";\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite location</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : null\r\n                }\r\n                {\r\n                    search && !error ?\r\n                        <span><small>{`Showing info for ${search}`}</small></span>\r\n                        : null\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2 pb-3\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : null\r\n                }\r\n            </div>\r\n            {\r\n                error === false && filtered < 1 ?\r\n                    <div className=\"pb-2\">\r\n                        <Pagination\r\n                            title={title}\r\n                        />\r\n                    </div>\r\n                    : null\r\n            }\r\n        </>\r\n    )\r\n}\r\nfunction mapState(state) {\r\n    return {\r\n        initial: state.locations.array,\r\n        filtered: state.locations.filteredLoc,\r\n        error: state.locations.errorLoc,\r\n        search: state.locations.searchLoc\r\n    }\r\n}\r\n\r\nLocations.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool,\r\n    search: PropTypes.string\r\n}\r\n\r\nexport default connect(mapState)(Locations);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport InfoCard from '../InfoCard/InfoCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Episodes = ({ initial, filtered, error, search }): JSX.Element => {\r\n\r\n    const title: string = \"episodes\"\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite episode</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : null\r\n                }\r\n                {\r\n                    search && !error ?\r\n                        <span><small>{`Showing info for ${search}`}</small></span>\r\n                        : null\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2 pb-3\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : null\r\n                }\r\n            </div>\r\n            {\r\n                error === false && filtered < 1\r\n                    ?\r\n                    <div className=\"pb-2\">\r\n                        <Pagination\r\n                            title={title}\r\n                        />\r\n                    </div>\r\n                    : null\r\n\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapState(state: any) {\r\n    return {\r\n        initial: state.episodes.array,\r\n        filtered: state.episodes.filteredEpi,\r\n        error: state.episodes.errorEpiso,\r\n        search: state.episodes.searchEpi\r\n    }\r\n}\r\n\r\nEpisodes.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool,\r\n    search: PropTypes.string\r\n}\r\n\r\nexport default connect(mapState)(Episodes);","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Footer = (): JSX.Element => {\r\n\r\n    const date: string = moment().format(\"MMM Do YYYY\");\r\n\r\n    return (\r\n        <div className=\"pt-5\">\r\n            <div className=\"navbar navbar-dark fixed-bottom bg-dark\">\r\n                <p className=\"text-left text-white\">JAVIER ALE</p>\r\n                <p className=\"text-right text-white\">{`Date: ${date}`}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n// Components\r\nimport Header from './Components/Header/Header'\r\nimport Characters from '../src/Components/Characters/Characters';\r\nimport Locations from '../src/Components/Locations/Locations';\r\nimport Episodes from '../src/Components/Episodes/Episodes';\r\nimport Footer from '../src/Components/Footer/Footer';\r\n\r\nconst AppRoutes = () => {\r\n    return (\r\n        <Router>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/rick-morty\" exact component={Characters} />\r\n\r\n                <Route path=\"/locations\" exact component={Locations} />\r\n\r\n                <Route path=\"/episodes\" exact component={Episodes} />\r\n\r\n                <Route>\r\n                    <div className=\"alert alert-danger pt-2\" role=\"alert\">\r\n                        <h4 className=\"alert-heading text-center\">Page not found</h4>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n            <Footer />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRoutes;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport AppRoutes from './AppRoutes';\r\nimport './App.css';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <div className=\"style\">\r\n      <AppRoutes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport charsReducer, { getCharactersAction } from './Reducers/charsReducer';\r\nimport locationsReducer, { getLocationsAction } from './Reducers/locationsReducer';\r\nimport episodesReducer, { getEpisodesAction } from './Reducers/episodesReducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    characters: charsReducer,\r\n    locations: locationsReducer,\r\n    episodes: episodesReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    let store = createStore(\r\n        rootReducer,\r\n        composeEnhancers(applyMiddleware(thunk))\r\n    )\r\n    getCharactersAction()(store.dispatch, store.getState)\r\n    getLocationsAction()(store.dispatch, store.getState)\r\n    getEpisodesAction()(store.dispatch, store.getState)\r\n    return store;\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport generateStore from './Redux/store';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nlet store = generateStore()\n\nlet client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n})\n\nlet WithRouter = () => <React.StrictMode><App /></React.StrictMode>\nlet WithStore = () => <Provider store={store}> <WithRouter /></Provider>\nlet WithApollo = () => <ApolloProvider client={client}><WithStore /></ApolloProvider>\n\nReactDOM.render(<WithApollo />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}