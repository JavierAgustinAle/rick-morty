{"version":3,"sources":["Components/Header/Header.jsx","Redux/Client.js","Redux/charsDuck.js","Redux/episodesDuck.js","Redux/locationsDuck.js","Components/SearchBar/SearchBar.jsx","Components/Modals/ModalChar.jsx","Components/CharCard/CharCard.jsx","Components/Pagination/Pagination.jsx","Components/NoData/NoData.jsx","Components/Characters/Characters.jsx","Components/Modals/ModalLocation.jsx","Components/Modals/ModalEpisode.jsx","Components/InfoCard/InfoCard.jsx","Components/Locations/Locations.jsx","Components/Episodes/Episodes.jsx","Components/Footer/Footer.jsx","AppRoutes.jsx","App.jsx","serviceWorker.js","Redux/store.js","index.js"],"names":["Header","changeActive","id","document","getElementById","className","exact","to","activeClassName","onClick","client","ApolloClient","uri","initialData","fetching","array","filtered","search","nextPage","prevPage","totalPages","error","getCharactersAction","direction","dispatch","getState","pageToGo","query","gql","type","undefined","characters","variables","page","then","data","payload","results","next","info","prev","total","pages","catch","errors","searchEpi","nextPageEpisod","prevPageEpisod","totalPagesEpisod","errorEpiso","getEpisodesAction","episodes","i","length","x","splice","searchLoc","nextPageLoca","prevPageLoca","totalPagesLoca","errorLoc","getLocationsAction","locations","residents","nextLoc","prevLoc","totalLoc","connect","state","getCharFiltersAction","searchName","searchType","name","getEpisodesFiltersAction","getLocationsFiltersAction","removeSearchCharAction","removeSearchEpisodeAction","removeSearchLocationsAction","title","searchInfo","e","target","value","toUpperCase","slice","clearSearch","placeholder","aria-label","onChange","onKeyPress","keyCode","Modal","setAppElement","ModalChar","onHide","show","isOpen","style","overlay","backgroundColor","content","position","src","image","alt","gender","species","CharCard","useState","setShow","width","charsTotal","episodTotal","locationTotal","charsNext","episodNext","locationNext","charsPrev","episodPrev","locationPrev","goToNextPage","goToPrevPage","NoData","initial","map","key","ModalLocation","dimension","maxWidth","ModalEpisode","air_date","episode","InfoCard","handleClose","handleShow","aria-hidden","Footer","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","AppRoutes","path","component","Characters","Locations","Episodes","role","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","generateStore","WithRouter","StrictMode","WithStore","WithApollo","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b727fdfe.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n\r\n    const changeActive = (id) => {\r\n        switch (id) {\r\n            case 'r-m':\r\n                document.getElementById('r-m').className = \"nav-link active\"\r\n                document.getElementById('loc').className = \"nav-link\"\r\n                document.getElementById('ep').className = \"nav-link\"\r\n                break;\r\n            case 'loc':\r\n                document.getElementById('loc').className = \"nav-link active\"\r\n                document.getElementById('r-m').className = \"nav-link\"\r\n                document.getElementById('ep').className = \"nav-link\"\r\n                break;\r\n            case 'ep':\r\n                document.getElementById('ep').className = \"nav-link active\"\r\n                document.getElementById('loc').className = \"nav-link\"\r\n                document.getElementById('r-m').className = \"nav-link\"\r\n                break;\r\n            default:\r\n                document.getElementById('r-m').className = \"nav-link\"\r\n                document.getElementById('loc').className = \"nav-link\"\r\n                document.getElementById('ep').className = \"nav-link\"\r\n                break;\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n\r\n        <nav className=\"navbar sticky-top navbar-expand-lg navbar-expand-md navbar-dark bg-dark \">\r\n            <div className=\"mx-auto\" >\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\" id=\"r-m\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/rick-morty\" activeClassName=\"activo\" onClick={() => changeActive('r-m')}> Characters </NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\" id=\"loc\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/locations\" activeClassName=\"activo\" onClick={() => changeActive('loc')}> Locations </NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\" id=\"ep\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/episodes\" activeClassName=\"activo\" onClick={() => changeActive('ep')}> Episodes </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import ApolloClient from \"apollo-boost\"\r\n\r\n\r\nexport const client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})","import { gql } from \"apollo-boost\"\r\nimport { client } from './Client';\r\n\r\n\r\nconst GET_CHARACTERS = 'GET_CHARACTERS';\r\nconst GET_CHARACTERS_SUCCESS = 'GET_CHARACTERS_SUCCESS';\r\nconst GET_CHARACTERS_ERROR = 'GET_CHARACTERS_ERROR';\r\n\r\nconst GET_FILTERS = 'GET_FILTERS';\r\nconst GET_FILTERS_ERROR = 'GET_FILTERS_ERROR';\r\nconst GET_FILTERS_SUCCESS = 'GET_FILTERS_SUCCESS';\r\n\r\nconst REMOVE_FILTERED = 'REMOVE_FILTERED';\r\n\r\nconst UPDATE_PAGE = 'UPDATE_PAGE';\r\n\r\nconst SET_SEARCH = 'SET_SEARCH';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filtered: [],\r\n    search: '',\r\n    nextPage: 1,\r\n    prevPage: 0,\r\n    totalPages: 0,\r\n    error: false\r\n}\r\n\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_CHARACTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_CHARACTERS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        case GET_CHARACTERS_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false }\r\n        case GET_FILTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_FILTERS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload, filtered: [] }\r\n        case GET_FILTERS_SUCCESS:\r\n            return { ...state, filtered: action.payload, fetching: false, error: false }\r\n        case REMOVE_FILTERED:\r\n            return { ...state, filtered: action.payload, error: false, search: '' }\r\n        case SET_SEARCH:\r\n            return { ...state, search: action.payload }\r\n        case UPDATE_PAGE:\r\n            return {\r\n                ...state, nextPage: action.payload.next,\r\n                prevPage: action.payload.prev, totalPages: action.payload.total\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions Creators\r\n\r\nexport const getCharFiltersAction = (searchName, searchType) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($name: String, $type: String) {\r\n        characters( filter: { name: $name, type: $type }) {\r\n          results {\r\n            id\r\n            name\r\n            image\r\n            type\r\n            gender\r\n            species\r\n            status\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_FILTERS\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName, type: searchType }\r\n    }).then(({ data }) => {\r\n        const searchValue = searchName ? searchName : searchType;\r\n        dispatch({\r\n            type: SET_SEARCH,\r\n            payload: searchValue\r\n        })\r\n        dispatch({\r\n            type: GET_FILTERS_SUCCESS,\r\n            payload: data.characters.results\r\n\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_FILTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n\r\n}\r\n\r\nexport const removeSearchCharAction = () => (dispatch, getState) => {\r\n    const filtered = []\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED,\r\n        payload: filtered\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nexport const getCharactersAction = (direction) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($page: Int){\r\n        characters(page: $page){\r\n          info{\r\n            pages\r\n            next\r\n            prev\r\n          }\r\n          results{\r\n            id\r\n            name\r\n            image\r\n            type\r\n            gender\r\n            species\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_CHARACTERS\r\n    })\r\n\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPage } = getState().characters\r\n        pageToGo = prevPage;\r\n    } else {\r\n        let { nextPage } = getState().characters\r\n        pageToGo = nextPage;\r\n    }\r\n\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data }) => {\r\n        dispatch({\r\n            type: GET_CHARACTERS_SUCCESS,\r\n            payload: data.characters.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE,\r\n            payload: {\r\n                next: data.characters.info.next ? data.characters.info.next : null,\r\n                prev: data.characters.info.prev ? data.characters.info.prev : null,\r\n                total: data.characters.info.pages\r\n            }\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_CHARACTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n\r\n    })\r\n\r\n}\r\n\r\n","import { gql } from \"apollo-boost\";\r\nimport { client } from './Client';\r\n\r\nconst GET_EPISODES = 'GET_EPISODES';\r\nconst GET_EPISODES_SUCCESS = 'GET_EPISODES_SUCCESS';\r\nconst GET_EPISODES_ERROR = 'GET_EPISODES_ERROR';\r\n\r\nconst GET_FILTERS_EPISODES = 'GET_FILTERS_EPISODES';\r\nconst GET_FILTERS_EPISODES_ERROR = 'GET_FILTERS_EPISODES_ERROR';\r\nconst GET_FILTERS_EPISODES_SUCCESS = 'GET_FILTERS_EPISODES_SUCCESS';\r\n\r\nconst REMOVE_FILTERED = 'REMOVE_FILTERED';\r\n\r\nconst UPDATE_PAGE_EPISODE = 'UPDATE_PAGE_EPISODE';\r\n\r\nconst SET_SEARCH_EP = 'SET_SEARCH_EP';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filtered: [],\r\n    searchEpi: '',\r\n    nextPageEpisod: 1,\r\n    prevPageEpisod: 0,\r\n    totalPagesEpisod: 0,\r\n    errorEpiso: false\r\n}\r\n\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_EPISODES:\r\n            return { ...state, fetching: true }\r\n        case GET_EPISODES_ERROR:\r\n            return { ...state, fetching: false, errorEpiso: action.payload }\r\n        case GET_EPISODES_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false, errorEpiso: false }\r\n        case GET_FILTERS_EPISODES:\r\n            return { ...state, fetching: true }\r\n        case GET_FILTERS_EPISODES_ERROR:\r\n            return { ...state, fetching: false, errorEpiso: action.payload }\r\n        case GET_FILTERS_EPISODES_SUCCESS:\r\n            return { ...state, filtered: action.payload, fetching: false, errorEpiso: false }\r\n        case REMOVE_FILTERED:\r\n            return { ...state, filtered: action.payload, errorEpiso: false, searchEpi: '' }\r\n        case UPDATE_PAGE_EPISODE:\r\n            return {\r\n                ...state, nextPageEpisod: action.payload.next,\r\n                prevPageEpisod: action.payload.prev, totalPagesEpisod: action.payload.total\r\n            }\r\n        case SET_SEARCH_EP:\r\n            return { ...state, searchEpi: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions Creators\r\n\r\nexport const getEpisodesFiltersAction = (searchName) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($name: String) {\r\n        episodes( filter: { name: $name }) {\r\n            results{\r\n              id\r\n              name\r\n              episode\r\n              air_date\r\n              characters{\r\n                id\r\n                name\r\n                image\r\n              }\r\n            }\r\n          }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_FILTERS_EPISODES\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.episodes.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.episodes.results[i].characters.splice(5, data.episodes.results[i].characters.length);\r\n            }\r\n        }\r\n        dispatch({\r\n            type: GET_FILTERS_EPISODES_SUCCESS,\r\n            payload: data.episodes.results\r\n\r\n        })\r\n        dispatch({\r\n            type: SET_SEARCH_EP,\r\n            payload: searchName\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_FILTERS_EPISODES_ERROR,\r\n            payload: true\r\n        })\r\n\r\n        return\r\n    })\r\n\r\n}\r\n\r\nexport const removeSearchEpisodeAction = () => (dispatch, getState) => {\r\n    const filtered = [];\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED,\r\n        payload: filtered\r\n    })\r\n}\r\n\r\nexport const getEpisodesAction = (direction) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($page: Int){\r\n        episodes(page: $page){\r\n          info{\r\n            pages\r\n            next\r\n            prev\r\n          }\r\n          results{\r\n            id\r\n            name\r\n            episode\r\n            air_date\r\n            characters{\r\n               id\r\n               name\r\n               image\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_EPISODES\r\n    })\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPageEpisod } = getState().episodes\r\n        pageToGo = prevPageEpisod;\r\n    } else {\r\n        let { nextPageEpisod } = getState().episodes\r\n        pageToGo = nextPageEpisod;\r\n    }\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.episodes.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.episodes.results[i].characters.splice(5, data.episodes.results[i].characters.length);\r\n            }\r\n        }\r\n        dispatch({\r\n            type: GET_EPISODES_SUCCESS,\r\n            payload: data.episodes.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE_EPISODE,\r\n            payload: {\r\n                next: data.episodes.info.next ? data.episodes.info.next : null,\r\n                prev: data.episodes.info.prev ? data.episodes.info.prev : null,\r\n                total: data.episodes.info.pages\r\n            }\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_EPISODES_ERROR,\r\n            payload: true\r\n        })\r\n\r\n        return\r\n    })\r\n\r\n}","import { gql } from \"apollo-boost\";\r\nimport { client } from './Client';\r\n\r\nconst GET_LOCATIONS = 'GET_LOCATIONS';\r\nconst GET_LOCATIONS_SUCCESS = 'GET_LOCATIONS_SUCCESS';\r\nconst GET_LOCATIONS_ERROR = 'GET_LOCATIONS_ERROR';\r\n\r\nconst GET_LOCATIONS_FILTERS = 'GET_LOCATIONS_FILTERS';\r\nconst GET_LOCATIONS_FILTERS_ERROR = 'GET_LOCATIONS_FILTERS_ERROR';\r\nconst GET_LOCATIONS_FILTERS_SUCCESS = 'GET_LOCATIONS_FILTERS_SUCCESS';\r\n\r\nconst REMOVE_FILTERED = 'REMOVE_FILTERED';\r\n\r\nconst UPDATE_PAGE_LOCATIONS = 'UPDATE_PAGE_LOCATIONS';\r\n\r\nconst SET_SEARCH_LOC = 'SET_SEARCH_LOC';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filtered: [],\r\n    searchLoc: '',\r\n    nextPageLoca: 1,\r\n    prevPageLoca: 0,\r\n    totalPagesLoca: 0,\r\n    errorLoc: false\r\n}\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_LOCATIONS:\r\n            return { ...state, fetching: true }\r\n        case GET_LOCATIONS_ERROR:\r\n            return { ...state, fetching: false, errorLoc: action.payload }\r\n        case GET_LOCATIONS_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false, errorLoc: false }\r\n        case GET_LOCATIONS_FILTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_LOCATIONS_FILTERS_ERROR:\r\n            return { ...state, fetching: false, errorLoc: action.payload }\r\n        case GET_LOCATIONS_FILTERS_SUCCESS:\r\n            return { ...state, filtered: action.payload, fetching: false, errorLoc: false }\r\n        case REMOVE_FILTERED:\r\n            return { ...state, filtered: action.payload, errorLoc: false, searchLoc: '' }\r\n        case UPDATE_PAGE_LOCATIONS:\r\n            return {\r\n                ...state, nextPageLoca: action.payload.nextLoc,\r\n                prevPageLoca: action.payload.prevLoc, totalPagesLoca: action.payload.totalLoc\r\n            }\r\n        case SET_SEARCH_LOC:\r\n            return { ...state, searchLoc: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//Actions Creators\r\nexport const getLocationsFiltersAction = (searchName, searchType) => (dispatch, getState) => {\r\n    const query = gql`\r\n    query ($name: String, $type: String) {\r\n        locations( filter: { name: $name, type: $type }) {\r\n            results{\r\n              id\r\n              name\r\n              dimension\r\n              type\r\n              residents{\r\n                id\r\n                name\r\n                image\r\n              }\r\n            }\r\n          }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_LOCATIONS_FILTERS\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName, type: searchType }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.locations.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.locations.results[i].residents.splice(5, data.locations.results[i].residents.length);\r\n            }\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_LOCATIONS_FILTERS_SUCCESS,\r\n            payload: data.locations.results\r\n\r\n        })\r\n        const searchValue = searchName ? searchName : searchType;\r\n        dispatch({\r\n            type: SET_SEARCH_LOC,\r\n            payload: searchValue\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_LOCATIONS_FILTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n}\r\n\r\nexport const removeSearchLocationsAction = () => (dispatch, getState) => {\r\n    const filtered = [];\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED,\r\n        payload: filtered\r\n    })\r\n}\r\n\r\nexport const getLocationsAction = (direction) => (dispatch, getState) => {\r\n    const query = gql`\r\n        query ($page: Int){\r\n            locations(page: $page){\r\n            info{\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                type\r\n                dimension\r\n                residents{\r\n                id\r\n                name\r\n                image\r\n                }\r\n            }\r\n            }\r\n        }\r\n    `\r\n    dispatch({\r\n        type: GET_LOCATIONS\r\n    })\r\n\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPageLoca } = getState().locations\r\n        pageToGo = prevPageLoca;\r\n    } else {\r\n        let { nextPageLoca } = getState().locations\r\n        pageToGo = nextPageLoca;\r\n    }\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data, error }) => {\r\n        for (let i = 0; i < data.locations.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.locations.results[i].residents.splice(5, data.locations.results[i].residents.length);\r\n            }\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_LOCATIONS_SUCCESS,\r\n            payload: data.locations.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE_LOCATIONS,\r\n            payload: {\r\n                nextLoc: data.locations.info.next ? data.locations.info.next : null,\r\n                prevLoc: data.locations.info.prev ? data.locations.info.prev : null,\r\n                totalLoc: data.locations.info.pages\r\n            }\r\n        })\r\n\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_LOCATIONS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getCharFiltersAction, removeSearchCharAction } from '../../Redux/charsDuck';\r\nimport { getEpisodesFiltersAction, removeSearchEpisodeAction } from '../../Redux/episodesDuck';\r\nimport { getLocationsFiltersAction, removeSearchLocationsAction } from '../../Redux/locationsDuck';\r\n\r\nconst SearchBar = ({ title,\r\n    getCharFiltersAction, getEpisodesFiltersAction,\r\n    getLocationsFiltersAction, removeSearchCharAction,\r\n    removeSearchEpisodeAction, removeSearchLocationsAction }) => {\r\n\r\n    function searchInfo(e) {\r\n\r\n        let target = e.target.value\r\n        if (target.length > 0)\r\n            target = target[0].toUpperCase() + target.slice(1);\r\n\r\n        if (target.length > 2) {\r\n            if (title === 'characters') {\r\n                let search = document.getElementById('searchType').value\r\n                search === 'name' ?\r\n                    //Filter by name\r\n                    getCharFiltersAction(target, '')\r\n                    :\r\n                    //Filter by type\r\n                    getCharFiltersAction('', target);\r\n\r\n\r\n            }\r\n            if (title === 'episodes') {\r\n                getEpisodesFiltersAction(target);\r\n            }\r\n            if (title === 'locations') {\r\n                let search = document.getElementById('searchType').value\r\n                search === 'name' ?\r\n                    //Filter by name\r\n                    getLocationsFiltersAction(target, '')\r\n                    :\r\n                    //Filter by type\r\n                    getLocationsFiltersAction('', target);\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearSearch() {\r\n        if (title === 'characters') {\r\n            removeSearchCharAction();\r\n            document.getElementById('input').value = '';\r\n        }\r\n        if (title === 'episodes') {\r\n            removeSearchEpisodeAction();\r\n            document.getElementById('input-episodes').value = '';\r\n        }\r\n        if (title === 'locations') {\r\n            removeSearchLocationsAction();\r\n            document.getElementById('input').value = '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"pb-2\">\r\n\r\n                {\r\n                    title === 'episodes'\r\n                        ?\r\n                        <input className=\"form-control\"\r\n                            type=\"text\"\r\n                            placeholder={`Search ${title} name`}\r\n                            aria-label=\"Search\"\r\n                            onChange={searchInfo}\r\n                            onKeyPress={(e) => { if (e.keyCode === 13) return false }}\r\n                            id=\"input-episodes\"\r\n                        />\r\n                        :\r\n                        <>\r\n                            <select onChange={clearSearch} className=\"custom-select col-lg-4 col-md-4 col-sm-5 pb-2\" id=\"searchType\">\r\n                                <option value=\"name\">Name</option>\r\n                                <option value=\"type\">Type</option>\r\n                            </select>\r\n                            <input className=\"form-control pt-2\"\r\n                                type=\"text\"\r\n                                placeholder={`Search ${title}`}\r\n                                aria-label=\"Search\"\r\n                                onChange={searchInfo}\r\n                                onKeyPress={(e) => { if (e.keyCode === 13) return false }}\r\n                                id=\"input\"\r\n                            />\r\n                        </>\r\n                }\r\n                <button className=\"btn btn-sm float-right\" onClick={clearSearch}>Clear Search</button>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nfunction mapState(state) {\r\n    return {}\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n\r\n    getCharFiltersAction: PropTypes.func.isRequired,\r\n    getEpisodesFiltersAction: PropTypes.func.isRequired,\r\n    getLocationsFiltersAction: PropTypes.func.isRequired,\r\n    removeSearchCharAction: PropTypes.func.isRequired,\r\n    removeSearchEpisodeAction: PropTypes.func.isRequired,\r\n    removeSearchLocationsAction: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default connect(mapState, {\r\n    getCharFiltersAction,\r\n    getEpisodesFiltersAction,\r\n    getLocationsFiltersAction,\r\n    removeSearchCharAction,\r\n    removeSearchEpisodeAction,\r\n    removeSearchLocationsAction\r\n})(SearchBar);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\nconst ModalChar = ({ data, onHide, show }) => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}><i className=\"fa fa-times\"></i></button>\r\n                </div>\r\n                <img className=\"card-img-top rounded mx-auto w-25\" src={data.image} alt={data.name} />\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title text-center\">{data.name}</h4>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Gender: ${data.gender}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Species: ${data.species}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Type: ${data.type ? data.type : 'No data'}`}</p></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal>\r\n    );\r\n};\r\n\r\nModalChar.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        image: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        gender: PropTypes.string.isRequired,\r\n        species: PropTypes.string.isRequired,\r\n        type: PropTypes.string\r\n    })\r\n}\r\n\r\nexport default ModalChar;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Modal\r\nimport CharModal from '../Modals/ModalChar';\r\n\r\n\r\nconst CharCard = ({ data }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    function handleClose() {\r\n        setShow(false);\r\n    }\r\n    function handleShow() {\r\n        setShow(true);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"mt-2 mb-2 col-lg-4 col-md-5 col-sm-6 mx-auto\">\r\n                <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                    <div className=\"embed-responsive embed-responsive-1by1\">\r\n                        <button onClick={handleShow}>\r\n                            <img className=\"card-img-top embed-responsive-item\" src={data.image} alt={data.id}\r\n                                title=\"Click for more info!\"\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title text-center\">{data.name}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {\r\n                show ?\r\n                    <CharModal\r\n                        show={show}\r\n                        onHide={handleClose}\r\n                        data={data} />\r\n                    : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nCharCard.propTypes = {\r\n    data: PropTypes.shape({\r\n        image: PropTypes.string,\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired\r\n    })\r\n}\r\n\r\nexport default CharCard;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getCharactersAction } from '../../Redux/charsDuck';\r\nimport { getEpisodesAction } from '../../Redux/episodesDuck';\r\nimport { getLocationsAction } from '../../Redux/locationsDuck';\r\n\r\n\r\nconst Pagination = ({ title, charsTotal, episodTotal, locationTotal, charsNext, episodNext,\r\n    locationNext, charsPrev, episodPrev, locationPrev, getCharactersAction, getEpisodesAction,\r\n    getLocationsAction }) => {\r\n\r\n    function goToNextPage() {\r\n        switch (title) {\r\n            case 'episodes':\r\n                getEpisodesAction()\r\n                break;\r\n            case 'characters':\r\n                getCharactersAction()\r\n                break;\r\n            case 'locations':\r\n                getLocationsAction()\r\n                break;\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    function goToPrevPage() {\r\n        switch (title) {\r\n            case 'episodes':\r\n                getEpisodesAction(episodPrev)\r\n                break;\r\n            case 'characters':\r\n                getCharactersAction(charsPrev)\r\n                break;\r\n            case 'locations':\r\n                getLocationsAction(locationPrev)\r\n                break;\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    if (title === 'episodes') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${episodPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToPrevPage}\r\n                        >Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item disabled\" >\r\n                        <label className=\"page-link text-info\">\r\n                            {`${episodNext != null ? episodNext - 1 : episodTotal} of ${episodTotal}`}\r\n                        </label>\r\n                    </li>\r\n                    <li className={`page-item ${episodNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToNextPage}>Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n\r\n    }\r\n    if (title === 'characters') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${charsPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToPrevPage}>Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item disabled\">\r\n                        <label className=\"page-link text-info\">\r\n                            {`${charsNext != null ? charsNext - 1 : charsTotal} of ${charsTotal}`}\r\n                        </label>\r\n                    </li>\r\n                    <li className={`page-item ${charsNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\"\r\n                            onClick={goToNextPage}\r\n                        >Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n    if (title === 'locations') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${locationPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button onClick={goToPrevPage} className=\"page-link\">Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item disabled\" >\r\n                        <label className=\"page-link text-info\">\r\n                            {`${locationNext != null ? locationNext - 1 : locationTotal} of ${locationTotal}`}\r\n                        </label>\r\n                    </li>\r\n                    <li className={`page-item ${locationNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\"\r\n                            onClick={goToNextPage}\r\n                        >Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nfunction mapState(state) {\r\n    return {\r\n        charsTotal: state.characters.totalPages,\r\n        episodTotal: state.episodes.totalPagesEpisod,\r\n        locationTotal: state.locations.totalPagesLoca,\r\n\r\n        charsNext: state.characters.nextPage,\r\n        episodNext: state.episodes.nextPageEpisod,\r\n        locationNext: state.locations.nextPageLoca,\r\n\r\n        charsPrev: state.characters.prevPage,\r\n        episodPrev: state.episodes.prevPageEpisod,\r\n        locationPrev: state.locations.prevPageLoca,\r\n\r\n    }\r\n}\r\n\r\nPagination.propTypes = {\r\n    charsTotal: PropTypes.number.isRequired,\r\n    episodTotal: PropTypes.number.isRequired,\r\n    locationTotal: PropTypes.number.isRequired,\r\n    charsNext: PropTypes.number,\r\n    episodNext: PropTypes.number,\r\n    locationNext: PropTypes.number,\r\n    charsPrev: PropTypes.number,\r\n    episodPrev: PropTypes.number,\r\n    locationPrev: PropTypes.number,\r\n    getCharactersAction: PropTypes.func.isRequired,\r\n    getEpisodesAction: PropTypes.func.isRequired,\r\n    getLocationsAction: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default connect(mapState, { getCharactersAction, getEpisodesAction, getLocationsAction })(Pagination);","import React from 'react';\r\n\r\nconst NoData = () => {\r\n    return (\r\n        <div>\r\n            <h3 className=\"text-danger text-center pt-5\">There is no data for this search :( </h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoData;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Componets\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport CharCard from '../CharCard/CharCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst Characters = ({ initial, filtered, error, search }) => {\r\n\r\n    const title = 'characters';\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite character</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : null\r\n                }\r\n                {\r\n                    search ?\r\n                        error ? null\r\n                            : <span><small>{`Showing info for ${search}`}</small></span>\r\n                        : null\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2 pb-3\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <CharCard\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <CharCard\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : ''\r\n                }\r\n            </div>\r\n            {\r\n                error === false ?\r\n                    filtered < 1 ?\r\n                        <div className=\"pb-2\">\r\n                            <Pagination\r\n                                title={title}\r\n                            />\r\n                        </div>\r\n                        : null\r\n                    : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction mapState(state) {\r\n    return {\r\n        initial: state.characters.array,\r\n        filtered: state.characters.filtered,\r\n        error: state.characters.error,\r\n        search: state.characters.search\r\n    }\r\n}\r\n\r\nCharacters.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool,\r\n    search: PropTypes.string\r\n}\r\n\r\nexport default connect(mapState)(Characters);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst ModalLocation = ({ data, onHide, show }) => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right  pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}><i className=\"fa fa-times\"></i></button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title text-center\">{data.name}</h1>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Dimension: ${data.dimension}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Type: ${data.type}`}</p></li>\r\n                    </ul>\r\n                    <h5 className=\"text-center\">Residents</h5>\r\n                    {\r\n                        data.residents[0].id != null ?\r\n                            <div className=\"card-deck\">\r\n                                {\r\n                                    data.residents.map(e => (\r\n                                        <div className=\"card\" key={e.name} style={{ maxWidth: '14rem' }}>\r\n                                            <img className=\"card-img-top\" src={e.image} alt={e.name} />\r\n                                            <div className=\"card-body text-dark\">\r\n                                                <h5 className=\"card-title text-center\">{e.name}</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                            : <h6 className=\"text-center pt-2\">No residents in this location.</h6>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal >\r\n    )\r\n}\r\n\r\nModalLocation.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        dimension: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        type: PropTypes.string,\r\n        residents: PropTypes.array.isRequired\r\n    })\r\n}\r\nexport default ModalLocation; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst ModalEpisode = ({ data, onHide, show }) => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right  pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}><i className=\"fa fa-times\"></i></button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title text-center\">{data.name}</h1>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Release Date: ${data.air_date}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Episode: ${data.episode}`}</p></li>\r\n                    </ul>\r\n                    <h3 className=\"text-center\">Characters</h3>\r\n                    <div className=\"card-deck\">\r\n                        {data.characters.map(e => (\r\n                            <div className=\"card\" key={e.name}>\r\n                                <img className=\"card-img-top\" src={e.image} alt={e.name} />\r\n                                <div className=\"card-body text-dark\">\r\n                                    <h5 className=\"card-title text-center\">{e.name}</h5>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nModalEpisode.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        air_date: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        episode: PropTypes.string.isRequired,\r\n        characters: PropTypes.array.isRequired\r\n    })\r\n}\r\n\r\nexport default ModalEpisode; ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './InfoCard.css'\r\n// Modal\r\nimport ModalLocation from '../Modals/ModalLocation';\r\nimport ModalEpisode from '../Modals/ModalEpisode';\r\n\r\nconst InfoCard = ({ data, title }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    function handleClose() {\r\n        setShow(false);\r\n    }\r\n    function handleShow() {\r\n        setShow(true);\r\n    }\r\n\r\n\r\n    if (title === 'episodes') {\r\n        return (\r\n            <>\r\n                <div className=\"mt-2 mb-2 col-lg-4 col-md-5 col-sm-6 mx-auto\">\r\n                    <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                        <div className=\"card-body\">\r\n                            <h3 className=\"card-title text-center\">{data.name}</h3><br></br>\r\n                            <p>Episode: {data.episode}</p>\r\n                        </div>\r\n                        <div className=\"card-footer text-right\">\r\n                            <button className=\"btn btn-sm btn-info\" onClick={handleShow}><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    show ?\r\n                        <ModalEpisode\r\n                            show={show}\r\n                            onHide={handleClose}\r\n                            data={data} />\r\n                        : null\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (title === 'locations') {\r\n        return (\r\n            <>\r\n                < div className=\"mt-2 mb-2 col-lg-4 col-md-5 col-sm-6 mx-auto\" >\r\n                    <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                        <div className=\"card-body\">\r\n                            <h3 className=\"card-title text-center\">{data.name}</h3>\r\n                            {\r\n                                data.dimension === 'unknown' ?\r\n                                    <p>Dimension unknown</p>\r\n                                    : <p>{data.dimension}</p>\r\n                            }\r\n                        </div>\r\n                        <div className=\"card-footer text-right\">\r\n                            <button className=\"btn btn-sm btn-info\" onClick={handleShow}><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    show ?\r\n                        <ModalLocation\r\n                            show={show}\r\n                            onHide={handleClose}\r\n                            data={data} />\r\n                        : null\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nInfoCard.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    data: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        episode: PropTypes.string,\r\n        dimension: PropTypes.string\r\n    })\r\n}\r\n\r\nexport default InfoCard","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport InfoCard from '../InfoCard/InfoCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Locations = ({ initial, filtered, error, search }) => {\r\n    const title = \"locations\";\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite location</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : null\r\n                }\r\n                {\r\n                    search ?\r\n                        error ? null\r\n                            : <span><small>{`Showing info for ${search}`}</small></span>\r\n                        : null\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2 pb-3\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : null\r\n                }\r\n            </div>\r\n            {\r\n                error === false ?\r\n                    filtered < 1 ?\r\n                        <div className=\"pb-2\">\r\n                            <Pagination\r\n                                title={title}\r\n                            />\r\n                        </div>\r\n                        : null\r\n                    : null\r\n            }\r\n        </>\r\n    )\r\n}\r\nfunction mapState(state) {\r\n    return {\r\n        initial: state.locations.array,\r\n        filtered: state.locations.filtered,\r\n        error: state.locations.errorLoc,\r\n        search: state.locations.searchLoc\r\n    }\r\n}\r\n\r\nLocations.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool,\r\n    search: PropTypes.string\r\n}\r\n\r\nexport default connect(mapState)(Locations);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport InfoCard from '../InfoCard/InfoCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Episodes = ({ initial, filtered, error, search }) => {\r\n    const title = \"episodes\"\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite episode</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : null\r\n                }\r\n                {\r\n                    search ?\r\n                        error ? null\r\n                            : <span><small>{`Showing info for ${search}`}</small></span>\r\n                        : null\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2 pb-3\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : null\r\n                }\r\n            </div>\r\n            {\r\n                error === false ?\r\n                    filtered < 1 ?\r\n                        <div className=\"pb-2\">\r\n                            <Pagination\r\n                                title={title}\r\n                            />\r\n                        </div>\r\n\r\n                        : null\r\n                    : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapState(state) {\r\n    return {\r\n        initial: state.episodes.array,\r\n        filtered: state.episodes.filtered,\r\n        error: state.episodes.errorEpiso,\r\n        search: state.episodes.searchEpi\r\n    }\r\n}\r\n\r\nEpisodes.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool,\r\n    search: PropTypes.string\r\n}\r\n\r\nexport default connect(mapState)(Episodes);","import React from 'react';\r\n\r\nconst Footer = () => {\r\n\r\n    let today = new Date();\r\n    let dd = today.getDate();\r\n\r\n    let mm = today.getMonth() + 1;\r\n    let yyyy = today.getFullYear();\r\n    if (dd < 10) {\r\n        dd = '0' + dd;\r\n    }\r\n    today = dd + '/' + mm + '/' + yyyy;\r\n\r\n    return (\r\n        <div className=\"pt-5\">\r\n            <div className=\"navbar navbar-dark fixed-bottom bg-dark\">\r\n                <p className=\"text-left text-white\">JAVIER ALE</p>\r\n                <p className=\"text-right text-white\">{`Date: ${today}`}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n// Components\r\nimport Header from './Components/Header/Header'\r\nimport Characters from '../src/Components/Characters/Characters';\r\nimport Locations from '../src/Components/Locations/Locations';\r\nimport Episodes from '../src/Components/Episodes/Episodes';\r\nimport Footer from '../src/Components/Footer/Footer';\r\n\r\nconst AppRoutes = () => {\r\n    return (\r\n        <Router>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/rick-morty\" exact component={Characters} />\r\n\r\n                <Route path=\"/locations\" exact component={Locations} />\r\n\r\n                <Route path=\"/episodes\" exact component={Episodes} />\r\n\r\n                <Route>\r\n                    <div className=\"alert alert-danger pt-2\" role=\"alert\">\r\n                        <h4 className=\"alert-heading text-center\">Page not found</h4>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n            <Footer />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRoutes;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport AppRoutes from './AppRoutes';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"style\">\r\n      <AppRoutes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport charsReducer, { getCharactersAction } from './charsDuck';\r\nimport locationsReducer, { getLocationsAction } from './locationsDuck';\r\nimport episodesReducer, { getEpisodesAction } from './episodesDuck';\r\n\r\nlet rootReducer = combineReducers({\r\n    characters: charsReducer,\r\n    locations: locationsReducer,\r\n    episodes: episodesReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    let store = createStore(\r\n        rootReducer,\r\n        composeEnhancers(applyMiddleware(thunk))\r\n    )\r\n    getCharactersAction()(store.dispatch, store.getState)\r\n    getLocationsAction()(store.dispatch, store.getState)\r\n    getEpisodesAction()(store.dispatch, store.getState)\r\n    return store;\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport generateStore from './Redux/store';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nlet store = generateStore()\n\nlet client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n})\n\nlet WithRouter = () => <React.StrictMode><App /></React.StrictMode>\nlet WithStore = () => <Provider store={store}> <WithRouter /></Provider>\nlet WithApollo = () => <ApolloProvider client={client}><WithStore /></ApolloProvider>\n\nReactDOM.render(<WithApollo />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}