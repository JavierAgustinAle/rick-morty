{"version":3,"sources":["Components/Header/Header.jsx","Redux/charsDuck.js","Redux/episodesDuck.js","Redux/locationsDuck.js","Components/SearchBar/SearchBar.jsx","Components/Modals/ModalChar.jsx","Components/CharCard/CharCard.jsx","Components/Pagination/Pagination.jsx","Components/NoData/NoData.jsx","Components/Characters/Characters.jsx","Components/Modals/ModalLocation.jsx","Components/Modals/ModalEpisode.jsx","Components/InfoCard/InfoCard.jsx","Components/Locations/Locations.jsx","Components/Episodes/Episodes.jsx","AppRoutes.jsx","App.jsx","serviceWorker.js","Redux/store.js","index.js"],"names":["Header","className","exact","to","activeClassName","client","ApolloClient","uri","initialData","fetching","array","filtered","nextPage","prevPage","totalPages","error","getCharactersAction","direction","dispatch","getState","pageToGo","query","gql","type","undefined","characters","variables","page","then","data","payload","results","next","info","prev","total","pages","catch","errors","nextPageEpisod","prevPageEpisod","totalPagesEpisod","errorEpiso","getEpisodesAction","episodes","i","length","x","splice","nextPageLoca","prevPageLoca","totalPagesLoca","errorLoc","getLocationsAction","locations","residents","nextLoc","prevLoc","totalLoc","connect","state","getCharFiltersAction","searchName","searchType","name","getEpisodesFiltersAction","getLocationsFiltersAction","removeSearchCharAction","removeSearchEpisodeAction","removeSearchLocationsAction","title","searchInfo","e","target","value","toUpperCase","slice","document","getElementById","clearSearch","placeholder","aria-label","onChange","onKeyPress","keyCode","id","onClick","Modal","setAppElement","ModalChar","onHide","show","isOpen","style","overlay","backgroundColor","content","position","src","image","alt","gender","species","CharCard","useState","setShow","width","charsTotal","episodTotal","locationTotal","charsNext","episodNext","locationNext","charsPrev","episodPrev","locationPrev","goToNextPage","goToPrevPage","NoData","initial","map","key","ModalLocation","dimension","ModalEpisode","air_date","episode","InfoCard","handleClose","handleShow","AppRoutes","path","component","Characters","Locations","Episodes","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","generateStore","WithRouter","StrictMode","WithStore","WithApollo","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ea986f60.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n\r\n        <nav className=\"navbar sticky-top navbar-expand-lg navbar-expand-md navbar-dark bg-dark \">\r\n            <div className=\"mx-auto\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/\" activeClassName=\"activo\"> Characters </NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/locations\" activeClassName=\"activo\"> Locations </NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" exact to=\"/episodes\" activeClassName=\"activo\"> Episodes </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import ApolloClient, { gql } from \"apollo-boost\"\r\n\r\n\r\nlet client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})\r\n\r\nlet GET_CHARACTERS = 'GET_CHARACTERS';\r\nlet GET_CHARACTERS_SUCCESS = 'GET_CHARACTERS_SUCCESS';\r\nlet GET_CHARACTERS_ERROR = 'GET_CHARACTERS_ERROR';\r\n\r\nlet GET_FILTERS = 'GET_FILTERS';\r\nlet GET_FILTERS_ERROR = 'GET_FILTERS_ERROR';\r\nlet GET_FILTERS_SUCCESS = 'GET_FILTERS_SUCCESS';\r\n\r\nlet REMOVE_FILTERED = 'REMOVE_FILTERED';\r\n\r\nlet UPDATE_PAGE = 'UPDATE_PAGE';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filtered: [],\r\n    nextPage: 1,\r\n    prevPage: 0,\r\n    totalPages: 0,\r\n    error: false\r\n}\r\n\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_CHARACTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_CHARACTERS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        case GET_CHARACTERS_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false }\r\n        case GET_FILTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_FILTERS_ERROR:\r\n            return { ...state, fetching: false, error: action.payload, filtered: [] }\r\n        case GET_FILTERS_SUCCESS:\r\n            return { ...state, filtered: action.payload, fetching: false, error: false }\r\n        case REMOVE_FILTERED:\r\n            return { ...state, filtered: action.payload, error: false }\r\n        case UPDATE_PAGE:\r\n            return {\r\n                ...state, nextPage: action.payload.next,\r\n                prevPage: action.payload.prev, totalPages: action.payload.total\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions Creators\r\n\r\nexport let getCharFiltersAction = (searchName, searchType) => (dispatch, getState) => {\r\n    let query = gql`\r\n    query ($name: String, $type: String) {\r\n        characters( filter: { name: $name, type: $type }) {\r\n          results {\r\n            id\r\n            name\r\n            image\r\n            type\r\n            gender\r\n            species\r\n            status\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_FILTERS\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName, type: searchType }\r\n    }).then(({ data }) => {\r\n        dispatch({\r\n            type: GET_FILTERS_SUCCESS,\r\n            payload: data.characters.results\r\n\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_FILTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n\r\n}\r\n\r\nexport let removeSearchCharAction = () => (dispatch, getState) => {\r\n    let filtered = []\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED,\r\n        payload: filtered\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nexport let getCharactersAction = (direction) => (dispatch, getState) => {\r\n    let query = gql`\r\n    query ($page: Int){\r\n        characters(page: $page){\r\n          info{\r\n            pages\r\n            next\r\n            prev\r\n          }\r\n          results{\r\n            id\r\n            name\r\n            image\r\n            type\r\n            gender\r\n            species\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_CHARACTERS\r\n    })\r\n\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPage } = getState().characters\r\n        pageToGo = prevPage;\r\n    } else {\r\n        let { nextPage } = getState().characters\r\n        pageToGo = nextPage;\r\n    }\r\n\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data }) => {\r\n        dispatch({\r\n            type: GET_CHARACTERS_SUCCESS,\r\n            payload: data.characters.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE,\r\n            payload: {\r\n                next: data.characters.info.next ? data.characters.info.next : null,\r\n                prev: data.characters.info.prev ? data.characters.info.prev : null,\r\n                total: data.characters.info.pages\r\n            }\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_CHARACTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n\r\n    })\r\n\r\n}\r\n\r\n","import ApolloClient, { gql } from \"apollo-boost\";\r\n\r\nlet client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})\r\n\r\nlet GET_EPISODES = 'GET_EPISODES';\r\nlet GET_EPISODES_SUCCESS = 'GET_EPISODES_SUCCESS';\r\nlet GET_EPISODES_ERROR = 'GET_EPISODES_ERROR';\r\n\r\nlet GET_FILTERS_EPISODES = 'GET_FILTERS_EPISODES';\r\nlet GET_FILTERS_EPISODES_ERROR = 'GET_FILTERS_EPISODES_ERROR';\r\nlet GET_FILTERS_EPISODES_SUCCESS = 'GET_FILTERS_EPISODES_SUCCESS';\r\n\r\nlet REMOVE_FILTERED = 'REMOVE_FILTERED';\r\n\r\nlet UPDATE_PAGE_EPISODE = 'UPDATE_PAGE_EPISODE';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filtered: [],\r\n    nextPageEpisod: 1,\r\n    prevPageEpisod: 0,\r\n    totalPagesEpisod: 0,\r\n    errorEpiso: false\r\n}\r\n\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_EPISODES:\r\n            return { ...state, fetching: true }\r\n        case GET_EPISODES_ERROR:\r\n            return { ...state, fetching: false, errorEpiso: action.payload }\r\n        case GET_EPISODES_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false, errorEpiso: false }\r\n        case GET_FILTERS_EPISODES:\r\n            return { ...state, fetching: true }\r\n        case GET_FILTERS_EPISODES_ERROR:\r\n            return { ...state, fetching: false, errorEpiso: action.payload }\r\n        case GET_FILTERS_EPISODES_SUCCESS:\r\n            return { ...state, filtered: action.payload, fetching: false, errorEpiso: false }\r\n        case REMOVE_FILTERED:\r\n            return { ...state, filtered: action.payload, errorEpiso: false }\r\n        case UPDATE_PAGE_EPISODE:\r\n            return {\r\n                ...state, nextPageEpisod: action.payload.next,\r\n                prevPageEpisod: action.payload.prev, totalPagesEpisod: action.payload.total\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions Creators\r\n\r\nexport let getEpisodesFiltersAction = (searchName) => (dispatch, getState) => {\r\n    let query = gql`\r\n    query ($name: String) {\r\n        episodes( filter: { name: $name }) {\r\n            results{\r\n              id\r\n              name\r\n              episode\r\n              air_date\r\n              characters{\r\n                id\r\n                name\r\n                image\r\n              }\r\n            }\r\n          }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_FILTERS_EPISODES\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.episodes.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.episodes.results[i].characters.splice(5, data.episodes.results[i].characters.length);\r\n            }\r\n        }\r\n        dispatch({\r\n            type: GET_FILTERS_EPISODES_SUCCESS,\r\n            payload: data.episodes.results\r\n\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_FILTERS_EPISODES_ERROR,\r\n            payload: true\r\n        })\r\n\r\n        return\r\n    })\r\n\r\n}\r\n\r\nexport let removeSearchEpisodeAction = () => (dispatch, getState) => {\r\n    let filtered = [];\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED,\r\n        payload: filtered\r\n    })\r\n}\r\n\r\nexport let getEpisodesAction = (direction) => (dispatch, getState) => {\r\n    let query = gql`\r\n    query ($page: Int){\r\n        episodes(page: $page){\r\n          info{\r\n            pages\r\n            next\r\n            prev\r\n          }\r\n          results{\r\n            id\r\n            name\r\n            episode\r\n            air_date\r\n            characters{\r\n               id\r\n               name\r\n               image\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_EPISODES\r\n    })\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPageEpisod } = getState().episodes\r\n        pageToGo = prevPageEpisod;\r\n    } else {\r\n        let { nextPageEpisod } = getState().episodes\r\n        pageToGo = nextPageEpisod;\r\n    }\r\n\r\n    return client.query({\r\n        query,\r\n\r\n        variables: { page: pageToGo }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.episodes.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.episodes.results[i].characters.splice(5, data.episodes.results[i].characters.length);\r\n            }\r\n        }\r\n        dispatch({\r\n            type: GET_EPISODES_SUCCESS,\r\n            payload: data.episodes.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE_EPISODE,\r\n            payload: {\r\n                next: data.episodes.info.next ? data.episodes.info.next : null,\r\n                prev: data.episodes.info.prev ? data.episodes.info.prev : null,\r\n                total: data.episodes.info.pages\r\n            }\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_EPISODES_ERROR,\r\n            payload: true\r\n        })\r\n\r\n        return\r\n    })\r\n\r\n}","import ApolloClient, { gql } from \"apollo-boost\";\r\n\r\nlet client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})\r\n\r\nlet GET_LOCATIONS = 'GET_LOCATIONS';\r\nlet GET_LOCATIONS_SUCCESS = 'GET_LOCATIONS_SUCCESS';\r\nlet GET_LOCATIONS_ERROR = 'GET_LOCATIONS_ERROR';\r\n\r\nlet GET_LOCATIONS_FILTERS = 'GET_LOCATIONS_FILTERS';\r\nlet GET_LOCATIONS_FILTERS_ERROR = 'GET_LOCATIONS_FILTERS_ERROR';\r\nlet GET_LOCATIONS_FILTERS_SUCCESS = 'GET_LOCATIONS_FILTERS_SUCCESS';\r\n\r\nlet REMOVE_FILTERED = 'REMOVE_FILTERED';\r\n\r\nlet UPDATE_PAGE_LOCATIONS = 'UPDATE_PAGE_LOCATIONS';\r\n\r\nlet initialData = {\r\n    fetching: false,\r\n    array: [],\r\n    filtered: [],\r\n    nextPageLoca: 1,\r\n    prevPageLoca: 0,\r\n    totalPagesLoca: 0,\r\n    errorLoc: false\r\n}\r\n\r\n// Reducer\r\n\r\nexport default function reducer(state = initialData, action) {\r\n    switch (action.type) {\r\n        case GET_LOCATIONS:\r\n            return { ...state, fetching: true }\r\n        case GET_LOCATIONS_ERROR:\r\n            return { ...state, fetching: false, errorLoc: action.payload }\r\n        case GET_LOCATIONS_SUCCESS:\r\n            return { ...state, array: action.payload, fetching: false, errorLoc: false }\r\n        case GET_LOCATIONS_FILTERS:\r\n            return { ...state, fetching: true }\r\n        case GET_LOCATIONS_FILTERS_ERROR:\r\n            return { ...state, fetching: false, errorLoc: action.payload }\r\n        case GET_LOCATIONS_FILTERS_SUCCESS:\r\n            return { ...state, filtered: action.payload, fetching: false, errorLoc: false }\r\n        case REMOVE_FILTERED:\r\n            return { ...state, filtered: action.payload, errorLoc: false }\r\n        case UPDATE_PAGE_LOCATIONS:\r\n            return {\r\n                ...state, nextPageLoca: action.payload.nextLoc,\r\n                prevPageLoca: action.payload.prevLoc, totalPagesLoca: action.payload.totalLoc\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//Actions Creators\r\nexport let getLocationsFiltersAction = (searchName, searchType) => (dispatch, getState) => {\r\n    let query = gql`\r\n    query ($name: String, $type: String) {\r\n        locations( filter: { name: $name, type: $type }) {\r\n            results{\r\n              id\r\n              name\r\n              dimension\r\n              type\r\n              residents{\r\n                id\r\n                name\r\n                image\r\n              }\r\n            }\r\n          }\r\n      }\r\n    `\r\n    dispatch({\r\n        type: GET_LOCATIONS_FILTERS\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name: searchName, type: searchType }\r\n    }).then(({ data }) => {\r\n        for (let i = 0; i < data.locations.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.locations.results[i].residents.splice(5, data.locations.results[i].residents.length);\r\n            }\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_LOCATIONS_FILTERS_SUCCESS,\r\n            payload: data.locations.results\r\n\r\n        })\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_LOCATIONS_FILTERS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n}\r\n\r\nexport let removeSearchLocationsAction = () => (dispatch, getState) => {\r\n    let filtered = [];\r\n\r\n    dispatch({\r\n        type: REMOVE_FILTERED,\r\n        payload: filtered\r\n    })\r\n}\r\n\r\nexport let getLocationsAction = (direction) => (dispatch, getState) => {\r\n    let query = gql`\r\n        query ($page: Int){\r\n            locations(page: $page){\r\n            info{\r\n                pages\r\n                next\r\n                prev\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                type\r\n                dimension\r\n                residents{\r\n                id\r\n                name\r\n                image\r\n                }\r\n            }\r\n            }\r\n        }\r\n    `\r\n    dispatch({\r\n        type: GET_LOCATIONS\r\n    })\r\n\r\n    let pageToGo;\r\n    if (direction !== undefined) {\r\n        let { prevPageLoca } = getState().locations\r\n        pageToGo = prevPageLoca;\r\n    } else {\r\n        let { nextPageLoca } = getState().locations\r\n        pageToGo = nextPageLoca;\r\n    }\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { page: pageToGo }\r\n    }).then(({ data, error }) => {\r\n        for (let i = 0; i < data.locations.results.length; i++) {\r\n            for (let x = 0; x < 5; x++) {\r\n                data.locations.results[i].residents.splice(5, data.locations.results[i].residents.length);\r\n            }\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_LOCATIONS_SUCCESS,\r\n            payload: data.locations.results\r\n        })\r\n        dispatch({\r\n            type: UPDATE_PAGE_LOCATIONS,\r\n            payload: {\r\n                nextLoc: data.locations.info.next ? data.locations.info.next : null,\r\n                prevLoc: data.locations.info.prev ? data.locations.info.prev : null,\r\n                totalLoc: data.locations.info.pages\r\n            }\r\n        })\r\n\r\n    }).catch((errors) => {\r\n        dispatch({\r\n            type: GET_LOCATIONS_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    })\r\n\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getCharFiltersAction, removeSearchCharAction } from '../../Redux/charsDuck';\r\nimport { getEpisodesFiltersAction, removeSearchEpisodeAction } from '../../Redux/episodesDuck';\r\nimport { getLocationsFiltersAction, removeSearchLocationsAction } from '../../Redux/locationsDuck';\r\n\r\nconst SearchBar = ({ title,\r\n    getCharFiltersAction, getEpisodesFiltersAction,\r\n    getLocationsFiltersAction, removeSearchCharAction,\r\n    removeSearchEpisodeAction, removeSearchLocationsAction }) => {\r\n\r\n    function searchInfo(e) {\r\n\r\n        let target = e.target.value\r\n        if (target.length > 0)\r\n            target = target[0].toUpperCase() + target.slice(1);\r\n\r\n        if (target.length > 2) {\r\n            if (title === 'characters') {\r\n                let search = document.getElementById('searchType').value\r\n                search === 'name' ?\r\n                    //Filter by name\r\n                    getCharFiltersAction(target, '')\r\n                    :\r\n                    //Filter by type\r\n                    getCharFiltersAction('', target);\r\n\r\n\r\n            }\r\n            if (title === 'episodes') {\r\n                getEpisodesFiltersAction(target);\r\n            }\r\n            if (title === 'locations') {\r\n                let search = document.getElementById('searchType').value\r\n                search === 'name' ?\r\n                    //Filter by name\r\n                    getLocationsFiltersAction(target, '')\r\n                    :\r\n                    //Filter by type\r\n                    getLocationsFiltersAction('', target);\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearSearch() {\r\n        if (title === 'characters') {\r\n            removeSearchCharAction();\r\n            document.getElementById('input').value = '';\r\n        }\r\n        if (title === 'episodes') {\r\n            removeSearchEpisodeAction();\r\n            document.getElementById('input-episodes').value = '';\r\n        }\r\n        if (title === 'locations') {\r\n            removeSearchLocationsAction();\r\n            document.getElementById('input').value = '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"pb-2\">\r\n\r\n                {\r\n                    title === 'episodes'\r\n                        ?\r\n                        <input className=\"form-control\"\r\n                            type=\"text\"\r\n                            placeholder={`Search ${title} name`}\r\n                            aria-label=\"Search\"\r\n                            onChange={searchInfo}\r\n                            onKeyPress={(e) => { if (e.keyCode === 13) return false }}\r\n                            id=\"input-episodes\"\r\n                        />\r\n                        :\r\n                        <>\r\n                            <select onChange={clearSearch} className=\"custom-select col-lg-4 col-md-4 col-sm-5 pb-2\" id=\"searchType\">\r\n                                <option value=\"name\">Name</option>\r\n                                <option value=\"type\">Type</option>\r\n                            </select>\r\n                            <input className=\"form-control pt-2\"\r\n                                type=\"text\"\r\n                                placeholder={`Search ${title}`}\r\n                                aria-label=\"Search\"\r\n                                onChange={searchInfo}\r\n                                onKeyPress={(e) => { if (e.keyCode === 13) return false }}\r\n                                id=\"input\"\r\n                            />\r\n                        </>\r\n                }\r\n                <button className=\"btn btn-sm float-right\" onClick={clearSearch}>Clear Search</button>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n// Entrega todo lo que tenga el store\r\nfunction mapState(state) {\r\n    return {}\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n\r\n    getCharFiltersAction: PropTypes.func.isRequired,\r\n    getEpisodesFiltersAction: PropTypes.func.isRequired,\r\n    getLocationsFiltersAction: PropTypes.func.isRequired,\r\n    removeSearchCharAction: PropTypes.func.isRequired,\r\n    removeSearchEpisodeAction: PropTypes.func.isRequired,\r\n    removeSearchLocationsAction: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default connect(mapState, {\r\n    getCharFiltersAction,\r\n    getEpisodesFiltersAction,\r\n    getLocationsFiltersAction,\r\n    removeSearchCharAction,\r\n    removeSearchEpisodeAction,\r\n    removeSearchLocationsAction\r\n})(SearchBar);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\nconst ModalChar = ({ data, onHide, show }) => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}>Close</button>\r\n                </div>\r\n                <img className=\"card-img-top rounded mx-auto w-25\" src={data.image} alt={data.name} />\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title text-center\">{data.name}</h4>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Gender: ${data.gender}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Species: ${data.species}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Type: ${data.type ? data.type : 'No data'}`}</p></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal>\r\n    );\r\n};\r\n\r\nModalChar.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        image: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        gender: PropTypes.string.isRequired,\r\n        species: PropTypes.string.isRequired,\r\n        type: PropTypes.string\r\n    })\r\n}\r\n\r\nexport default ModalChar;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Modal\r\nimport CharModal from '../Modals/ModalChar';\r\n\r\n\r\nconst CharCard = ({ data }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    function handleClose() {\r\n        setShow(false);\r\n    }\r\n    function handleShow() {\r\n        setShow(true);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"mt-2 mb-2 col-lg-3 col-md-4 col-sm-6\">\r\n                <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                    <div className=\"embed-responsive embed-responsive-1by1\">\r\n                        <button onClick={handleShow}>\r\n                            <img className=\"card-img-top embed-responsive-item\" src={data.image} alt={data.id}\r\n                                title=\"Click for more info!\"\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title text-center\">{data.name}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {\r\n                show ?\r\n                    <CharModal\r\n                        show={show}\r\n                        onHide={handleClose}\r\n                        data={data} />\r\n                    : ''\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nCharCard.propTypes = {\r\n    data: PropTypes.shape({\r\n        image: PropTypes.string,\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired\r\n    })\r\n}\r\n\r\nexport default CharCard;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getCharactersAction } from '../../Redux/charsDuck';\r\nimport { getEpisodesAction } from '../../Redux/episodesDuck';\r\nimport { getLocationsAction } from '../../Redux/locationsDuck';\r\n\r\n\r\nconst Pagination = ({ title, charsTotal, episodTotal, locationTotal, charsNext, episodNext,\r\n    locationNext, charsPrev, episodPrev, locationPrev, getCharactersAction, getEpisodesAction,\r\n    getLocationsAction }) => {\r\n\r\n    function goToNextPage() {\r\n        switch (title) {\r\n            case 'episodes':\r\n                getEpisodesAction()\r\n                break;\r\n            case 'characters':\r\n                getCharactersAction()\r\n                break;\r\n            case 'locations':\r\n                getLocationsAction()\r\n                break;\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    function goToPrevPage() {\r\n        switch (title) {\r\n            case 'episodes':\r\n                getEpisodesAction(episodPrev)\r\n                break;\r\n            case 'characters':\r\n                getCharactersAction(charsPrev)\r\n                break;\r\n            case 'locations':\r\n                getLocationsAction(locationPrev)\r\n                break;\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    if (title === 'episodes') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${episodPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToPrevPage}\r\n                        >Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item\" >\r\n                        <button className=\"page-link\">\r\n                            {episodNext != null ? episodNext - 1 : episodTotal}\r\n                        </button>\r\n                    </li>\r\n                    <li className={`page-item ${episodNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToNextPage}>Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n\r\n    } else if (title === 'characters') {\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${charsPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={goToPrevPage}>Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item\">\r\n                        <button className=\"page-link\">\r\n                            {charsNext != null ? charsNext - 1 : charsTotal}\r\n                        </button>\r\n                    </li>\r\n                    <li className={`page-item ${charsNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\"\r\n                            onClick={goToNextPage}\r\n                        >Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    } else if (title === 'locations') {\r\n\r\n        return (\r\n            <nav className=\"pt-3\">\r\n                <ul className=\"pagination justify-content-center\">\r\n                    <li className={`page-item ${locationPrev === null ? \"disabled\" : \"\"}`}>\r\n                        <button onClick={goToPrevPage} className=\"page-link\">Previous</button>\r\n                    </li>\r\n                    <li className=\"page-item\" >\r\n                        <button className=\"page-link\">\r\n                            {locationNext != null ? locationNext - 1 : locationTotal}\r\n                        </button>\r\n                    </li>\r\n                    <li className={`page-item ${locationNext === null ? \"disabled\" : \"\"}`}>\r\n                        <button className=\"page-link\"\r\n                            onClick={goToNextPage}\r\n                        >Next</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nfunction mapState(state) {\r\n    return {\r\n        charsTotal: state.characters.totalPages,\r\n        episodTotal: state.episodes.totalPagesEpisod,\r\n        locationTotal: state.locations.totalPagesLoca,\r\n\r\n        charsNext: state.characters.nextPage,\r\n        episodNext: state.episodes.nextPageEpisod,\r\n        locationNext: state.locations.nextPageLoca,\r\n\r\n        charsPrev: state.characters.prevPage,\r\n        episodPrev: state.episodes.prevPageEpisod,\r\n        locationPrev: state.locations.prevPageLoca,\r\n\r\n    }\r\n}\r\n\r\nPagination.propTypes = {\r\n    charsTotal: PropTypes.number.isRequired,\r\n    episodTotal: PropTypes.number.isRequired,\r\n    locationTotal: PropTypes.number.isRequired,\r\n    charsNext: PropTypes.number,\r\n    episodNext: PropTypes.number,\r\n    locationNext: PropTypes.number,\r\n    charsPrev: PropTypes.number,\r\n    episodPrev: PropTypes.number,\r\n    locationPrev: PropTypes.number,\r\n    getCharactersAction: PropTypes.func.isRequired,\r\n    getEpisodesAction: PropTypes.func.isRequired,\r\n    getLocationsAction: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default connect(mapState, { getCharactersAction, getEpisodesAction, getLocationsAction })(Pagination);","import React from 'react';\r\n\r\nconst NoData = () => {\r\n    return (\r\n        <div>\r\n            <h3 className=\"text-danger\">There is no data for this search :(</h3>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default NoData;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Componets\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport CharCard from '../CharCard/CharCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst Characters = ({ initial, filtered, error }) => {\r\n\r\n    const title = 'characters';\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite character</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : ''\r\n                }\r\n            </div>\r\n\r\n            <br />\r\n            <div className=\"row pl-2 pr-2\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <CharCard\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <CharCard\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : ''\r\n                }\r\n            </div>\r\n            {\r\n                error === false ?\r\n                    filtered < 1 ?\r\n                        <Pagination\r\n                            title={title}\r\n                        />\r\n                        : ''\r\n                    : ''\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n// Entrega todo lo que tenga el store\r\nfunction mapState(state) {\r\n    return {\r\n        initial: state.characters.array,\r\n        filtered: state.characters.filtered,\r\n        error: state.characters.error\r\n    }\r\n}\r\n\r\nCharacters.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool\r\n}\r\n\r\nexport default connect(mapState)(Characters);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst ModalLocation = ({ data, onHide, show }) => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right  pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}>Close</button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title text-center\">{data.name}</h1>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Dimension: ${data.dimension}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Type: ${data.type}`}</p></li>\r\n                    </ul>\r\n                    <h5 className=\"text-center\">Residents</h5>\r\n                    <div className=\"card-deck\">\r\n                        {data.residents.map(e => (\r\n                            <div className=\"card\" key={e.name}>\r\n                                <img className=\"card-img-top\" src={e.image} alt={e.name} />\r\n                                <div className=\"card-body text-dark\">\r\n                                    <h5 className=\"card-title text-center\">{e.name}</h5>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nModalLocation.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        dimension: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        type: PropTypes.string,\r\n        residents: PropTypes.array.isRequired\r\n    })\r\n}\r\nexport default ModalLocation; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Modal\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst ModalEpisode = ({ data, onHide, show }) => {\r\n    return (\r\n        <Modal isOpen={show}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                    backgroundColor: '#4B515D',\r\n                    position: 'absolute'\r\n\r\n                }\r\n            }}>\r\n            <div className=\"card mb-3 text-white bg-secondary\">\r\n                <div className=\"text-right  pb-1\">\r\n                    <button className=\"btn btn-sm btn-danger\" onClick={onHide}>Close</button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"card-title text-center\">{data.name}</h1>\r\n                    <ul>\r\n                        <li><p className=\"card-text\">{`Release Date: ${data.air_date}`}</p></li>\r\n                        <li><p className=\"card-text\">{`Episode: ${data.episode}`}</p></li>\r\n                    </ul>\r\n                    <h3 className=\"text-center\">Characters</h3>\r\n                    <div className=\"card-deck\">\r\n                        {data.characters.map(e => (\r\n                            <div className=\"card\" key={e.name}>\r\n                                <img className=\"card-img-top\" src={e.image} alt={e.name} />\r\n                                <div className=\"card-body text-dark\">\r\n                                    <h5 className=\"card-title text-center\">{e.name}</h5>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nModalEpisode.propTypes = {\r\n    onHide: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    data: PropTypes.shape({\r\n        air_date: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        episode: PropTypes.string.isRequired,\r\n        characters: PropTypes.array.isRequired\r\n    })\r\n}\r\n\r\nexport default ModalEpisode; ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Modal\r\nimport ModalLocation from '../Modals/ModalLocation';\r\nimport ModalEpisode from '../Modals/ModalEpisode';\r\n\r\nconst InfoCard = ({ data, title }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    function handleClose() {\r\n        setShow(false);\r\n    }\r\n    function handleShow() {\r\n        setShow(true);\r\n    }\r\n\r\n\r\n    if (title === 'episodes') {\r\n        return (\r\n            <>\r\n                <div className=\"mt-2 mb-2 col-lg-3 col-md-4 col-sm-6\">\r\n                    <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                        <div className=\"card-body\">\r\n                            <h3 className=\"card-title text-center\">{data.name}</h3><br></br>\r\n                            <p>{data.episode}</p>\r\n                        </div>\r\n                        <div className=\"card-footer text-right\">\r\n                            <button className=\"btn btn-sm btn-light\" onClick={handleShow}>+</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    show ?\r\n                        <ModalEpisode\r\n                            show={show}\r\n                            onHide={handleClose}\r\n                            data={data} />\r\n                        : ''\r\n                }\r\n            </>\r\n        )\r\n\r\n    } else {\r\n        return (\r\n            <>\r\n                < div className=\"mt-2 mb-2 col-lg-3 col-md-4 col-sm-6\" >\r\n                    <div className=\"card text-white bg-secondary h-100 mx-auto\" style={{ width: '18rem' }}>\r\n                        <div className=\"card-body\">\r\n                            <h3 className=\"card-title text-center\">{data.name}</h3>\r\n                            <p>{data.dimension}</p>\r\n                        </div>\r\n                        <div className=\"card-footer text-right\">\r\n                            <button className=\"btn btn-sm btn-light\" onClick={handleShow}>+</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    show ?\r\n                        <ModalLocation\r\n                            show={show}\r\n                            onHide={handleClose}\r\n                            data={data} />\r\n                        : ''\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nInfoCard.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    data: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        episode: PropTypes.string,\r\n        dimension: PropTypes.string\r\n    })\r\n}\r\n\r\nexport default InfoCard","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport InfoCard from '../InfoCard/InfoCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Locations = ({ initial, filtered, error }) => {\r\n    const title = \"locations\";\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite location</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : ''\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : ''\r\n                }\r\n            </div>\r\n            {\r\n                error === false ?\r\n                    filtered < 1 ?\r\n                        <Pagination\r\n                            title={title}\r\n                        />\r\n                        : ''\r\n                    : ''\r\n            }\r\n        </>\r\n    )\r\n}\r\nfunction mapState(state) {\r\n    return {\r\n        initial: state.locations.array,\r\n        filtered: state.locations.filtered,\r\n        error: state.locations.errorLoc\r\n    }\r\n}\r\n\r\nLocations.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool\r\n}\r\n\r\nexport default connect(mapState)(Locations);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport InfoCard from '../InfoCard/InfoCard';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport NoData from '../NoData/NoData';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Episodes = ({ initial, filtered, error }) => {\r\n    const title = \"episodes\"\r\n    return (\r\n        <>\r\n            <h1 className=\"pt-1 text-center\">Search your favorite episode</h1>\r\n            <div className=\"mx-auto col-8 col-sm-7 pt-3 pb-3\">\r\n                <SearchBar\r\n                    title={title}\r\n                />\r\n                {\r\n                    error ?\r\n                        <div className=\"mx-auto\"><NoData /></div>\r\n                        : ''\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className=\"row pl-2 pr-2\">\r\n                {\r\n                    error === false ?\r\n                        filtered.length < 1\r\n                            ?\r\n                            initial.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                            :\r\n                            filtered.map(e => (\r\n                                <InfoCard\r\n                                    title={title}\r\n                                    key={e.id}\r\n                                    data={e}\r\n                                />\r\n\r\n                            ))\r\n                        : ''\r\n                }\r\n            </div>\r\n            {\r\n                error === false ?\r\n                    filtered < 1 ?\r\n                        <Pagination\r\n                            title={title}\r\n                        />\r\n                        : ''\r\n                    : ''\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapState(state) {\r\n    return {\r\n        initial: state.episodes.array,\r\n        filtered: state.episodes.filtered,\r\n        error: state.episodes.errorEpiso\r\n    }\r\n}\r\n\r\nEpisodes.propTypes = {\r\n    initial: PropTypes.array.isRequired,\r\n    filtered: PropTypes.array,\r\n    error: PropTypes.bool\r\n}\r\n\r\nexport default connect(mapState)(Episodes);","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n// Components\r\nimport Header from './Components/Header/Header'\r\nimport Characters from '../src/Components/Characters/Characters';\r\nimport Locations from '../src/Components/Locations/Locations';\r\nimport Episodes from '../src/Components/Episodes/Episodes';\r\n\r\nconst AppRoutes = () => {\r\n    return (\r\n        <Router>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/rick-morty\" exact component={Characters} />\r\n\r\n                {/* <Route path=\"/houses/:id\" exact component={Houses} /> */}\r\n                <Route path=\"/locations\" exact component={Locations} />\r\n\r\n                <Route path=\"/episodes\" exact component={Episodes} />\r\n\r\n                {/* <Route component={NotFound} /> */}\r\n\r\n                <Route>\r\n                    <div>\r\n                        <h1>Error 404</h1>\r\n                        <span className=\"text-danger\">Pagina no encontrada.</span>\r\n                    </div>\r\n                </Route>\r\n\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRoutes;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport AppRoutes from './AppRoutes';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"style\">\r\n      <AppRoutes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport charsReducer, { getCharactersAction } from './charsDuck';\r\nimport locationsReducer, { getLocationsAction } from './locationsDuck';\r\nimport episodesReducer, { getEpisodesAction } from './episodesDuck';\r\n\r\nlet rootReducer = combineReducers({\r\n    characters: charsReducer,\r\n    locations: locationsReducer,\r\n    episodes: episodesReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    let store = createStore(\r\n        rootReducer,\r\n        composeEnhancers(applyMiddleware(thunk))\r\n    )\r\n    getCharactersAction()(store.dispatch, store.getState)   //Ahora se llama automaticamente\r\n    getLocationsAction()(store.dispatch, store.getState)\r\n    getEpisodesAction()(store.dispatch, store.getState)\r\n    return store;\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport generateStore from './Redux/store';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nlet store = generateStore()\n\nlet client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n})\n\nlet WithRouter = () => <React.StrictMode><App /></React.StrictMode>\nlet WithStore = () => <Provider store={store}> <WithRouter /></Provider>\nlet WithApollo = () => <ApolloProvider client={client}><WithStore /></ApolloProvider>\n\nReactDOM.render(<WithApollo />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}